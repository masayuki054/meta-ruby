#+name: olm
#+BEGIN_SRC sh :exports none :results output org :var args="meta-ruby note/ruby-note-sinatra-org.org  org-server.org"
sh ~/COMM/Lects/bin/github_link.sh $args
#+END_SRC

* 講義予定 (14) 2017-01-30

  self => ~suzuki/meta-ruby.git/org/lects/14/plan.org

** 図を描きました

   [[https://github.com/masayuki054/meta-ruby/blob/master/docs/Figs][図の置き場所]]

   - [[https://github.com/masayuki054/meta-ruby/blob/master/docs/Figs/object_and_class.png][オブジクトとクラス図]]

   - [[https://github.com/masayuki054/meta-ruby/blob/master/docs/Figs/class_hier.png][メタクラス階層図]]

   [[https://github.com/masayuki054/meta-ruby/blob/master/docs/Figs/class-diagram][デザインパターンクラス図置き場]]

** 講義内容

*** Doing Ruby programming 

     今日は，課題 「sinatra による org-mode 文書閲覧サービス」について
     説明します:

**** 課題の提出

     - 自分のレポート提出フォルダに，Examples フォルダを作成し，
     - 課題ごとに，作成したプログラムと，その説明，実行とその結果をまと
       めた org 文書を作成し，
     - 上記 Examples/ フォルダに提出してください。

**** Doing Examples [4/5]
    
      実践的なプログラムを作ってみましょう。

      先生の見本は，~suzuki/rubys/examples/ の下, [[https://github.com/masayuki054/meta-ruby/tree/master/org/work][work]] (github) に，個々
      のプログラムを置くようにします。(([[file://~suzuki/rubys/examples.org][@cis]], [[file:~/meta-ruby.git/org/work][@s]]))

     - [X] file_print.rb <2016-11-21 月> 
     - [X] home_directory.rb <2016-11-28 月>
     - [X] shuzo-meigen.rb <2016-11-28 月> home work
     - [X] dir_traverse.rb <2016-12-08 木> home work
     - [ ] sinatra による org-mode 文書閲覧サービス <2017-01-16 月>

       説明は (([[https://github.com/masayuki054/meta-ruby/tree/master/org/note/ruby-note-sinatra-org.org][@github]]/[[file+emacs:~suzuki/meta-ruby.git/org/note/ruby-note-sinatra-org.org][@cis]]/[[file+emacs:~/meta-ruby.git/org/note/ruby-note-sinatra-org.org][@s]])) にあります。

*** Todo オブジェクト指向について
    SCHEDULED: <2016-11-14 月>

**** [[http://d.hatena.ne.jp/asakichy/20090421/1240277448][オブジェクト指向の本懐 - Strategic Choice]] を始めましょう。[4/4]

      strategic-choice.org (([[https://github.com/masayuki054/meta-ruby/tree/master/org/oo/strategic-choice.org][@github]]/[[file+emacs:~suzuki/meta-ruby.git/org/oo/strategic-choice.org][@cis]]/[[file+emacs:~/meta-ruby.git/org/oo/strategic-choice.org][@s]]))

     読む予定のページです。~/rubys/oo.org にまとめてください。

     - [ ] <2017-01-30 月> [[http://d.hatena.ne.jp/asakichy/20090428/1240878836][オブジェクト指向分析 -- オブジェクト指向の本懐（７）]]

     - [X] <2017-01-23 月>[[http://d.hatena.ne.jp/asakichy/20090427/1240813478][オブジェクト指向の本懐（６）・オブジェクト指向技術 - Strategic Choice]]

     - [X] <2017-01-16 月>[[http://d.hatena.ne.jp/asakichy/20090426/1240703715][オブジェクト指向の本懐（５）・オブジェクト指向パラダイム - Strategic Choice]]

     - [X] <2016-12-19 月>[[http://d.hatena.ne.jp/asakichy/20090424/1240533845][オブジェクト指向の本懐（３）・オブジェクト指向黎明期の誤解 - Strategic Choice]]

     - [X] <2016-12-12 月> [[http://d.hatena.ne.jp/asakichy/20090425/1240613767][オブジェクト指向の本懐（４）・ソフトウエア開発プロセスの観点 - Strategic Choice]]

     ((s-:)) のまとめ strategic-choice.org ([[https://github.com/masayuki054/meta-ruby/tree/master/org/oo/strategic-choice.org][@github]]/[[file+emacs:~suzuki/meta-ruby.git/org/oo/strategic-choice.org][@cis]]/[[file+emacs:~/meta-ruby.git/org/oo/strategic-choice.org][@s]])

**** Todo Rubyのオブジェクト原理主義

     https://docs.ruby-lang.org/ja/latest/doc/spec=2fintro.html

     を読んで Ruby らしさについて考えましょう。

*** Todo メタプログラミング Ruby
    SCHEDULED: <2016-11-07 月>

    file://~suzuki/COMM/Lects/meta-ruby/book を使います。

    ~/rubys/meta-programming-ruby.org にまとめながらやっていきましょう。

    今日は，[[./meta-ruby.org][meta-ruby]] と meta-programming-ruby.org
    (([[https://github.com/masayuki054/meta-ruby/tree/master/org/work/meta-programming-ruby.org][org@github]]/[[file+emacs:~suzuki/meta-ruby.git/org/work/meta-programming-ruby.org][org@cis]]/[[file+emacs:~/meta-ruby.git/org/work/meta-programming-ruby.org][@]])) を使って，

    - [ ] <2017-01-30 月> ブロックとクロージャ，スコープゲートについて説明します。
    - [X] <2017-01-23 月> ブロックとクロージャについて説明します。
    - [X] クラス階層，特異メソッド，メタクラス階層について，説明します。

*** Ruby オブジェクト指向プログラミング

**** デザイン・パターン  ([[https://github.com/masayuki054/meta-ruby/tree/master/org/work/design-pattern.org][@github]] [[file:~/meta-ruby.git/org/work/design-pattern.org][@cis]] [[file:~/meta-ruby.git/org/work/design-pattern.org][@s]]) 

     [[http://morizyun.github.io/blog/ruby-design-pattern-matome-mokuzi/][Ruby2.0.0で学ぶ、14個のデザインパターンを作りました]] は，ruby で書
     いたデザイン・パターンの実装例です。これを読んで，デザイン・パター
     ンの心を理解しましょう。

      - [[http://www.techscore.com/tech/DesignPattern/index.html/][デザインパターン | TECHSCORE(テックスコア)]] 
        デザインパターンのリファレンスに使いましょう。

      - uml.org (([[https://github.com/masayuki054/meta-ruby/tree/master/org/work/uml.org][@github]]/[[file+emacs:~suzuki/meta-ruby.git/org/work/uml.org][@cis]]/[[file+emacs:~/meta-ruby.git/org/work/uml.org][@s]]))
        UMLについてのメモを作成しています。<2017-01-17 火>

#+RESULTS:

     - ((s-:)) の design-pattern.org
       (([[https://github.com/masayuki054/meta-ruby/tree/master/org/work/design-pattern.org][org@github]]/[[file+emacs:~suzuki/meta-ruby.git/org/work/design-pattern.org][org@cis]]/[[file+emacs:~/meta-ruby.git/org/work/design-pattern.org][@]]))

       - [X] AbstractFactory・パターン

## call_olm[:var args="meta-ruby work/abstract-factory-pattern.org abstract-factory-pattern.org"]()

             abstract-factory-pattern.org (([[https://github.com/masayuki054/meta-ruby/tree/master/org/work/abstract-factory-pattern.org][@github]]/[[file+emacs:~suzuki/meta-ruby.git/org/work/abstract-factory-pattern.org][@cis]]/[[file+emacs:~/meta-ruby.git/org/work/abstract-factory-pattern.org][@s]]))

       - [X] シングルトン・パターン

## call_olm[:var args="meta-ruby work/singleton.org singleton.org"]() 

             singleton.org (([[https://github.com/masayuki054/meta-ruby/tree/master/org/work/singleton.org][@github]]/[[file+emacs:~suzuki/meta-ruby.git/org/work/singleton.org][@cis]]/[[file+emacs:~/meta-ruby.git/org/work/singleton.org][@s]]))
       - [X] ビルダ・パターン

## call_olm[:var args="meta-ruby work/builder-pattern.orgbuilder-pattern.org"]() 

         builder-pattern.org (([[https://github.com/masayuki054/meta-ruby/tree/master/org/work/builder-pattern.org][@github]]/[[file+emacs:~suzuki/meta-ruby.git/org/work/builder-pattern.org][@cis]]/[[file+emacs:~/meta-ruby.git/org/work/builder-pattern.org][@s]]))

       - [ ] オブザーバ・・パターン

## call_olm[:var args="meta-ruby work/observer-pattern.orgobserver-pattern.org"]() 

          observer-pattern.org (([[https://github.com/masayuki054/meta-ruby/tree/master/org/work/observer-pattern.org][@github]]/[[file+emacs:~suzuki/meta-ruby.git/org/work/observer-pattern.org][@cis]]/[[file+emacs:~/meta-ruby.git/org/work/observer-pattern.org][@s]]))

	 

**** 単体テストを体験しましょう。

    - テストとかテストによる開発については，簡単に，[[https://masayuki054.github.io/prog/org-docs/software-test.html][ソフトウェア・テスト]]，
      [[https://masayuki054.github.io/prog/org-docs/what-is-tdd.html][テスト駆動開発とは]] で紹介します。

    - Ruby の単体テスト・フレームワーク Test::Unit をやってみましょう.
      
      - [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/meta-ruby/lects/note/][note]] (([[https://github.com/masayuki054/meta-ruby/blob/master/org/note/ruby-note-test.org][.org.github]] [[file://~suzuki/meta-ruby.git/org/note/ruby-note-test.org][.org]].emacs)) のtest-unit を読んでください。


** 終わったこと

*** Doing Ruby programming 
**** Done Ruby入門 [1/2]
     CLOSED: [2016-11-29 火 19:59]


    - file://~suzuki/rubys/ruby-begin.org emacsで見てください
    - [[https://github.com/masayuki054/meta-ruby/blob/master/org/lects/ruby-begin.org][ruby-begin.org@repos]] github 適宜raw mode で見てください

**** Done [[http://www.tohoho-web.com/ruby/][とほほのRuby入門]] ([[./ruby.org]] 2.ruby入門-2.1 2016)
     CLOSED: [2016-11-29 火 19:59]
 
    ~/rubys/ruby-begin.org にまとめながらやっていきましょう。
     - begin~end, 例外処理
     - 正規表現
     - メソッド
     - クラス


*** Todo オブジェクト指向について
    SCHEDULED: <2016-11-14 月>
   
**** Done [[http://qiita.com/hirokidaichi/items/591ad96ab12938878fe1][人類がオブジェクト指向を手に入れるまでの軌跡 - Qiita]] 
     CLOSED: [2016-12-06 火 15:52]

     読みまとめ始めましょう。Strategic Choice も参考にします。

    - [X] ソフトウェア危機
    - [X] 構造化プログラミング
    - [X] モジュラープログラミング
    - [X] 抽象データ型
    - [X] オブジェクト指向 メッセージングと動的ディスパッチ
    - [X] オブジェクト指向 仮想機械とメッセージング

    ~/rubys/oo.org にまとめてください。
 
    - org-mode で書いてみましょう 

      file://~suzuki/rubys/oo.org

*** Todo メタプログラミング Ruby
    SCHEDULED: <2016-11-07 月>

*** Ruby オブジェクト指向プログラミング


*** 講義のための環境つくり

**** Doing 文芸的プログラミング環境 
     - emacs org-mode
     - emacs org-mode + babel

**** Done ruby実行環境 
     CLOSED: [2016-10-31 月 20:20]
     [[./ruby.org]] [2/2]
     - [X] ruby情報
     - [X] ruby環境作り [4/4]
       - [X] rbenv とは 
       - [X] 自前で rbenv+ruby-build をインストール

       - [X] ruby のインストール
	 先週，    
	 : rbenv install 2.3.0-dev 
	 ができない人がいましたが，どうも，
         : ~/.rbenv/plugins/ruby-build/bin 
	 にある，ruby-install が認識されていないためのようです。
	 取り敢えず，~/.rbenv/plugins/ruby-build/bin を PATH に入れてく
         ださい。
	 
       - [X] gem (rubyのパッケージ管理)

**** Done ruby プログラミング環境
     CLOSED: [2016-10-31 月 20:20]
     [[./emacs.org][Emacs]]
     - [X] emacs-24.5
     - [X] emacsのパッケージと設定


** やらなかったこと
*** Ruby オブジェクト指向プログラミング
**** ポーカーゲームのテスト駆動開発

     [[./poker.org][poker開発]] 

     [[https://github.com/masayuki054/meta-ruby/tree/master/org/poker][meta-ruby/org/poker at master · masayuki054/meta-ruby]]

