* 20分で始める Ruby の のーと

** インタラクティブRuby

irb の起動

: % irb
: irb(main):001:0>
<sTAB

#+BEGIN_SRC ruby :exports both

"Hello World"

#+END_SRC

#+RESULTS:
: Hello World

IRBが最後の式を実行した結果
を教えてくれている。 

"Hello World"と出力したいのであれば

#+BEGIN_SRC ruby :results output :exports both

puts "Hello World"

#+END_SRC

#+RESULTS:
: Hello World
: => nil

putsはRubyで何かを出力する基本的なコマンドです。 

=> nilは, このコマンドの評価結果です。 putsは必ずnilを返します。nil
は、「まったく何もない」ことを表すRubyの「値」です。

#+BEGIN_SRC ruby :exports both

3+2

#+END_SRC

#+RESULTS:
: => 5

#+BEGIN_SRC ruby :exports both

3*2

#+END_SRC

#+RESULTS:
: => 6

#+BEGIN_SRC ruby :exports both

3**2
#+END_SRC

#+RESULTS:
: => 9

平方根(square root)を求めるにはMathモジュールを使う:

#+BEGIN_SRC ruby :exports both

Math.sqrt(9)

#+END_SRC

#+RESULTS:
: =>3.0

** Math は一体なんでしょうか？

Math は数学のためのビルトインモジュール(標準で組み込まれているモジュー
ル)です。

#+BEGIN_SRC ruby :exports both

Math.class

#+END_SRC

#+RESULTS:
: Module

Rubyでは、モジュールには2通りの役割があります。これはその1つ目の役割、
関連するメソッドを馴染みのある名前でグループ化するものです。Math は
sin() や tan() といったメソッドも持っています。

#+BEGIN_SRC ruby :exports both :results code

(Math.methods)

#+END_SRC

#+RESULTS:
#+BEGIN_SRC ruby
[:atan2, :cos, :sin, :tan, :acos, :asin, :atan, :cosh, :sinh, :tanh, :acosh, :asinh, :atanh, :exp, :log, :log2, :log10, :sqrt, :cbrt, :frexp, :ldexp, :hypot, :erf, :erfc, :gamma, :lgamma, :<=>, :module_exec, :class_exec, :<=, :>=, :==, :===, :include?, :included_modules, :ancestors, :name, :public_instance_methods, :instance_methods, :private_instance_methods, :protected_instance_methods, :const_get, :constants, :const_defined?, :const_set, :class_variables, :class_variable_get, :remove_class_variable, :class_variable_defined?, :class_variable_set, :private_constant, :public_constant, :singleton_class?, :deprecate_constant, :freeze, :inspect, :module_eval, :const_missing, :prepend, :method_defined?, :class_eval, :public_method_defined?, :private_method_defined?, :<, :public_class_method, :>, :protected_method_defined?, :private_class_method, :to_s, :autoload, :autoload?, :instance_method, :public_instance_method, :include, :instance_of?, :public_send, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :remove_instance_variable, :private_methods, :kind_of?, :instance_variables, :tap, :public_method, :singleton_method, :is_a?, :extend, :define_singleton_method, :method, :to_enum, :enum_for, :=~, :!~, :eql?, :respond_to?, :display, :object_id, :send, :nil?, :hash, :class, :singleton_class, :clone, :dup, :itself, :taint, :tainted?, :untaint, :untrust, :trust, :untrusted?, :methods, :protected_methods, :frozen?, :public_methods, :singleton_methods, :!, :!=, :__send__, :equal?, :instance_eval, :instance_exec, :__id__]
#+END_SRC

その次はドット（.）です。

** このドットは何でしょうか？ 

これは、*レシーバ* の *メッセージ* を指定するためのものです。 

*メッセージ* とは何でしょうか？ この例では、sqrt(9)がメッセージになります。

これは「平方根(square root)」の省略形、 sqrtというメソッドにパラメータ
として9を与えて呼び出しています。 このメソッド呼び出しの実行結果は3.0
という値になります。 3 ではないことに気づいたかもしれません。 平方根は
たいてい整数にならないためです。 そのため、このメソッドは必ず小数（浮
動小数点数）を返します。


** 実行結果を変数に代入

#+BEGIN_SRC ruby :exports both
a = 3 ** 2

b = 4 ** 2

Math.sqrt(a+b)

#+END_SRC

#+RESULTS:
: => 5.0


** メソッドを定義

#+BEGIN_SRC ruby :exports both :session ruby

def hi
  puts "Hello World!"
end

#+END_SRC

#+RESULTS:
: :hi

=> :hi

** 簡潔で繰り返せるメソッド

それではこのメソッドを何度か実行してみましょう。
#+BEGIN_SRC ruby :exports both :results output :session ruby

hi

#+END_SRC

#+RESULTS:
: Hello World!
: => Hello World!

#+BEGIN_SRC ruby :exports both :results output :session ruby

hi()

#+END_SRC

#+RESULTS:
: Hello World!
: => Hello World!


#+BEGIN_SRC ruby :exports both :session ruby

def hi(name)
 puts "Hello #{name}!"
end

#+END_SRC

#+RESULTS:
: => :hi


** Stringに穴を開ける

#{name}は、文字列に何かを挿入する際のRubyでのやり方です。

ブレースの間にあるものは（もし文字列でなければ）
文字列に変換され、その外側の文字列の中に置き換えられます。このしくみは、
誰かの名前を正しくcapitalizedするのにも使えます。

#+BEGIN_SRC ruby :session ruby :exports both 

 def hi(name = "World")
 puts "Hello #{name.capitalize}!"
 end

#+END_SRC

#+RESULTS:
: => :hi

#+BEGIN_SRC ruby :exports both :session ruby :results output

hi "chris"

#+END_SRC

#+RESULTS:
: Hello Chris!
: => nil

#+BEGIN_SRC ruby :exports both :session ruby :results output

hi 

#+END_SRC

#+RESULTS:
: Hello World!
: => nil

- カッコなしでメソッド呼び出しが使われていることです。何をやっているか
  明確であれば、カッコは省略できます。

- デフォルト引数のWorldです。

** 挨拶人(Greeter)への進化

本物の挨拶人がいたのなら、あなたの名前を覚えてくれる上、歓迎し、いつで
も丁重に扱ってくれるでしょう。そのためにオブジェクトを使いたくなりそう
です。“Greeter”クラスを作ってみましょう。

#+BEGIN_SRC ruby :exports both :session ruby

 class Greeter
   def initialize(name = "World")
     @name = name
   end
   def say_hi
     puts "Hi #{@name}!"
   end
   def say_bye
     puts "Bye #{@name}, come back soon."
   end
 end

#+END_SRC

#+RESULTS:
: :say_bye

#+BEGIN_SRC ruby :session ruby :results output
Greeter.superclass
(Greeter.superclass).methods
Greeter.ancestors
Greeter.class
(Greeter.class).ancestors

'end'


#+END_SRC

#+RESULTS:
: => Object
: => [:new, :allocate, :superclass, :<=>, :module_exec, :class_exec, :<=, :>=, :==, :===, :include?, :included_modules, :ancestors, :name, :public_instance_methods, :instance_methods, :private_instance_methods, :protected_instance_methods, :const_get, :constants, :const_defined?, :const_set, :class_variables, :class_variable_get, :remove_class_variable, :class_variable_defined?, :class_variable_set, :private_constant, :public_constant, :singleton_class?, :deprecate_constant, :freeze, :inspect, :module_eval, :const_missing, :prepend, :method_defined?, :class_eval, :public_method_defined?, :private_method_defined?, :<, :public_class_method, :>, :protected_method_defined?, :private_class_method, :to_s, :autoload, :autoload?, :instance_method, :public_instance_method, :include, :instance_of?, :public_send, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :remove_instance_variable, :private_methods, :kind_of?, :instance_variables, :tap, :public_method, :singleton_method, :is_a?, :extend, :define_singleton_method, :method, :to_enum, :enum_for, :=~, :!~, :eql?, :respond_to?, :display, :object_id, :send, :nil?, :hash, :class, :singleton_class, :clone, :dup, :itself, :taint, :tainted?, :untaint, :untrust, :trust, :untrusted?, :methods, :protected_methods, :frozen?, :public_methods, :singleton_methods, :!, :!=, :__send__, :equal?, :instance_eval, :instance_exec, :__id__]
: => [Greeter, Object, Kernel, BasicObject]
: => Class
: => [Class, Module, Object, Kernel, BasicObject]

*** 新しいキーワードはclassです。

これはGreeterという新しいクラスと、そのクラスのメソッドをいくつか定義
しています。

また、@nameにも気づいたかもしれません。これは
インスタンス変数で、このクラスにある全てのメソッドで使うことができます。

見ての通り、say_hi と say_byeで使われています。

さて、どうすればこのGreeterクラスを動かせるでしょうか？


** オブジェクトを作りましょう。

#+BEGIN_SRC ruby :session ruby

greeter = Greeter.new("Paul")


#+END_SRC

#+RESULTS:
: #<Greeter:0x007f5a42934ee8 @name="Paul">


#+BEGIN_SRC ruby :session ruby

greeter = Greeter.new("Mary")

#+END_SRC

#+RESULTS:
: #<Greeter:0x007f5a427447a0 @name="Mary">

#+BEGIN_SRC ruby :session ruby :exports both :results code

Greeter.instance_methods(false)

#+END_SRC

#+RESULTS:
#+BEGIN_SRC ruby
[:say_hi, :say_bye]
#+END_SRC

initialize メソッドが，(public) instance_methods に現れないのは，
initialize メソッドは自動的に private になるため


#+BEGIN_SRC ruby :session ruby :exports both :results code

Greeter.private_instance_methods(false)

#+END_SRC

#+RESULTS:
#+BEGIN_SRC ruby
[:initialize]
#+END_SRC


*** respond_to? 

返事がもらえるか

#+BEGIN_SRC ruby :session ruby :exports both :results code

greeter.respond_to?("name")

#+END_SRC

#+RESULTS:
#+BEGIN_SRC ruby
false
#+END_SRC

後から，name メソッドを追加 (できる)

#+BEGIN_SRC ruby :session ruby :exports both :results code
class Greeter
  def name
    @name
  end
end

#+END_SRC

#+RESULTS:
#+BEGIN_SRC ruby
:name
#+END_SRC

#+BEGIN_SRC ruby :session ruby :exports both :results code

greeter.respond_to?("name")

#+END_SRC

#+RESULTS:
#+BEGIN_SRC ruby
true
#+END_SRC


*** ruby スクリプト

#+BEGIN_SRC ruby :tangle ri20min.rb
#!/usr/bin/env ruby
# coding:utf-8
class Greeter
  def initialize(name = "World")
     @name = name
  end
  def say_hi
    puts "Hi #{@name}!"
  end
  def say_bye
    puts "Bye #{@name}, come back soon."
  end
end

class MegaGreeter
  attr_accessor :names

  #create the object
  def initialize(names="world")
    @name = names
  end

  #say hi to everybody
  def say_hi
    if @names.nil?
      puts "..."
    elsif @names.respond_to?("each")
      # @names is a list some kind, iterate!
      @names.each do |name|
        puts "Hello #{name}!"
      end
    else
      puts "Hello #{@names}!"
    end

    #say bye to everybody
    def say_bye
      if @names.nil?
        puts "..."
      elsif @names.respond_to?("join")
      # Join the list elements with commas
        puts "Goodby #{@names.join(", ")}. come back soon!"
      else
        puts "Goodby #{@names}. come back soon!"
      end
    end
  end
end


if __FILE__ == $0

  # スクリプトとして実行されている場合

  mg = MegaGreeter.new
  mg.say_hi
  mg.say_bye

  mg.names = "zeke"
  mg.say_hi
  mg.say_bye

  mg.names = ["Albert", "Brenda", "Charles"]
  mg.say_hi
  mg.say_bye

end
#+END_SRC

#+RESULTS:


#+BEGIN_SRC ruby :session ruby :results output

["a","b","c"].class
(["a","b","c"]).respond_to?(:each)
["a","b","c"].each
["a","b","c"].each do |elem| 
   puts elem
end

'end'

#+END_SRC

#+RESULTS:
: 
: => Array
: => true
: => #<Enumerator: ["a", "b", "c"]:each>
: irb(main):096:1* irb(main):097:1> a
: b
: c
: => ["a", "b", "c"]


* とほほ Ruby入門 

  [[http://www.tohoho-web.com/ruby/][とほほのRuby入門]]

** Ruby入門 - 構文
**** Rubyの書き方

「Hello World!」を出力するプログラム

#+BEGIN_EXAMPLE
    puts "Hello World!\n"
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

**** [[][文・式]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

Perl, PHP, Javaなどでは、式(文)はセミコロン(;)で区切りますが、Ruby
では通常改行で区切ります。

#+BEGIN_EXAMPLE
    puts "Hello\n"
    puts "World\n"
#+END_EXAMPLE

ただし、セミコロン(*;*)を用いることで、複数の式を1行に記述することもできます。

#+BEGIN_EXAMPLE
    puts "Hello\n"; puts "World\n"
#+END_EXAMPLE

式の途中で改行したい場合、バックスラッシュ(*\*)を用います。

#+BEGIN_EXAMPLE
    ans = 1 + 2 + 3 + \
          4 + 5 + 6
#+END_EXAMPLE

**** [[][コメント(#)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*#* から行末の間はコメントとして解釈されます。

#+BEGIN_EXAMPLE
    <?php
    # ここはコメントになります。
    puts "ここは本文\n";
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

--------------

#+BEGIN_HTML
  <div>
#+END_HTML

Copyright(C) 2014 杜甫々

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div>
#+END_HTML

初版：2014年12月30日、最終更新：2014年12月30日

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div>
#+END_HTML

http://www.tohoho-web.com/ruby/syntax.html

#+BEGIN_HTML
  </div>
#+END_HTML


** 変数
   - local variable :: x in block
   - instance variable  :: @x in self
   - class variable  ::  @@x in self.class
   - global variable ::  $x in system toplevel
   - constant :: ::M1::M2::C in nesting module
   - constant :: C in クラス継承

** Ruby入門 - 数値・文字列・型
*** [[][整数(Integer)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*整数*(*Integer*)は下記の様に記述します。

#+BEGIN_EXAMPLE
    num = 1234        // 正の整数
    num = -1234       // 負の整数
#+END_EXAMPLE

*0d*, *0x*, *0o*, *0b*
はそれぞれ、10進数、16進数、8進数、2進数を意味します。

#+BEGIN_EXAMPLE
    num = 0d1234       // 10進数 (0dで始まる数値は10進数とみなされる)
    num = 0xffff       // 16進数 (0xで始まる数値は16進数とみなされる)
    num = 0o777        //  8進数 (0oで始まる数値は 8進数とみなされる)
    num = 0b11000100   //  2進数 (0bで始まる数値は 2進数とみなされる)
#+END_EXAMPLE

数値の途中のアンダーバー(*\_*)は無視されます。これは、桁数の多い数値をわかりやすく表現する際に利用されます。

#+BEGIN_EXAMPLE
    num = 1_230_000_000       // 1,230,000,000
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][浮動小数点数(Float)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*浮動少数点数*(*Float*)は下記の様に記述します。

#+BEGIN_EXAMPLE
    num = 1.234     // 浮動小数点数
    num = 1.2e3     // 浮動小数点数(指数表記) 1.2 × 103
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][論理型(Boolean)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*論理値*(*Boolean*)は、*true* または *false*
で表します。これらは、TrueClass, FalseClass
クラスの唯一のインスタンスです。

#+BEGIN_EXAMPLE
    bool = true
    bool = false
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][文字列(String)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*文字列*(*String*)は、ダブルクォート(*"*)、またはシングルクォート(*'*)で囲みます。

#+BEGIN_EXAMPLE
    str = "Hello world"
    str = 'Hello world'
#+END_EXAMPLE

"..." の中では ' を、'...' の中では " を使うことができます。"..." の中で
" を、'...' の中で '
を使用するには、バックスラッシュ(*\*)を用いて引用符をエスケープ(無効化)します。

#+BEGIN_EXAMPLE
    str = "He said \"I'll be back.\""
    str = 'He said "I\'ll be back."'
#+END_EXAMPLE

"..."
の中では、後述のバックスラッシュ記法や、式展開を用いることができます。'...'
の中では \\ と \' のみが意味を持ちます。

#+BEGIN_EXAMPLE
    str = "My name is #{name}.\n"
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][エスケープシーケンス(\x)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

"..."
の中では、バックスラッシュ(*\*)を用いて、下記の*エスケープシーケンス*を使用できます。

#+BEGIN_EXAMPLE
    \t : タブ(TAB:0x09)
    \v : 垂直タブ(VT:0x0b)
    \n : 改行(ラインフィード:LF:0x0a)
    \r : キャリッジリターン(CR:0x0d)
    \f : フォームフィード(FF:0x0c)
    \b : バックスペース(BS:0x08)
    \a : ベル(BEL:0x07)
    \e : エスケープ(ESC:0x1b)
    \s : 空白(SPC:0x20)
    \\ : バックスラッシュ(\)
    \改行 : 改行(LF:0x0a)
    \nnn : 8進表記文字(nは0～7)
    \xnn : 16進表記文字(nは0～f)
    \unnnn : ユニコード文字nnnn (Ruby 1.9～)
    \u{nnnn} : ユニコード文字nnnn (Ruby 1.9～)
    \cx : コントロール文字(xはASCII文字)
    \C-x : コントロール文字(xはASCII文字)
    \M-x : メタ文字(xはASCII文字)
    \M-\C-x : メタコントロール
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][式展開(#{...})]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

文字列の中では、*#{式}* の形式で *式展開* することができます。

#+BEGIN_EXAMPLE
    name = "Tanaka"
    puts "My name is #{name}"          #=> My name is Tanaka

    x = 5; y = 3
    puts "Answer is #{ x + y }"        #=> Answer is 8
#+END_EXAMPLE

式が変数で、@ や $ で始まる場合は、{ } を省略することができます。

#+BEGIN_EXAMPLE
    puts "My name is #{@name}"
    puts "My name is #@name"
#+END_EXAMPLE

式展開を抑止するには、# の前にバックスラッシュ(*/*)を書きます。

#+BEGIN_EXAMPLE
    puts "You can use \#{expression} notation in the ruby string."
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][コマンド出力(`...`)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

バッククォート(*`*)で囲まれた文字列は、バックスラッシュ記法や式展開が行われた後、*コマンド出力*として実行され、コマンドの実行結果が文字列として返されます。

#+BEGIN_EXAMPLE
    puts `date`        # => Thu Sat 18 18:15:47 JST 2013
#+END_EXAMPLE

コマンドの終了ステータスを得るには、*$?* を参照します。

#+BEGIN_EXAMPLE
    date = `date`
    status = $?
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][ヒアドキュメント(<<)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*ヒアドキュメント*(*<<識別子*)の構文を用いて、複数行の文字列を現すことができます。下記の例では、This
is ～
の2行が表示されます。識別子は、アンダーバー(\_)を含む半角英数字(最初の文字は数値以外)であれば何でも使用できます。

#+BEGIN_EXAMPLE
    print <<END_OF_STRING
    This is Japan.
    This is America.
    END_OF_STRING
#+END_EXAMPLE

最後の識別子のみの行は、行頭や行末にスペースを入れることが許されません。ただし、*<<-識別子*
の構文を用いると、先頭のスペースが許可されます。

#+BEGIN_EXAMPLE
      print <<-EOS
    This is Japan.
    This is America.
      EOS
#+END_EXAMPLE

識別子をダブルクォート(")、シングルクォート(')、バッククォート(`)で囲むと、それぞれ、"...",
'...', `...` で囲まれた文字列の様に振る舞います。ただし、"..." の中での
" や、'...' の中での ' はエスケープする必要はありません。

#+BEGIN_EXAMPLE
    print <<EOS            # Same as "EOS"
    My name is #{name}.
    EOS

    print <<"EOS"
    My name is #{name}.
    EOS

    print <<'EOS'
    You can use #{expression} notation.
    EOS

    print <<`EOS`
    date
    EOS
#+END_EXAMPLE

一度に複数のヒアドキュメントを使用することもできます。

#+BEGIN_EXAMPLE
    print <<FIRST, <<SECOND
      This is the first string.
    FIRST
      This is the second string.
    SECOND
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

--------------

#+BEGIN_HTML
  <div>
#+END_HTML

Copyright(C) 2014 杜甫々

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div>
#+END_HTML

初版：2014年12月30日、最終更新：2014年12月30日

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div>
#+END_HTML

http://www.tohoho-web.com/ruby/types.html


  </div>
#+END_HTML


#+BEGIN_SRC ruby :results output :session ruby

string = <<EOF
abc
def
EOF

puts string

PI = 3.14

puts PI

PI = 3.1415

puts PI

#+END_SRC

#+RESULTS:
#+begin_example

irb(main):002:0* irb(main):003:0" irb(main):004:0" irb(main):005:0" => "abc\ndef\n"
irb(main):007:0* abc
def
=> nil
irb(main):009:0* => 3.14
irb(main):011:0* 3.14
=> nil
irb(main):013:0* (irb):13: warning: already initialized constant PI
(irb):9: warning: previous definition of PI was here
=> 3.1415
irb(main):015:0* 3.1415
#+end_example


#+BEGIN_SRC ruby :results output

class MyClass
  PI = 3.14
end

puts MyClass::PI
# puts PI

#+END_SRC

#+RESULTS:
: 3.14


** array

#+BEGIN_SRC 
ary = [1, 2, 3, 4]
p ary[6] = 6
p ary
p ary.include?(6)
p ary[2..4]
p ary.join(",")

#+END_SRC

#+RESULTS:


** hash

#+BEGIN_SRC ruby :results output
mon = {"Jan" => 1, "Feb" => 2}
p mon["Jan"]
p mon["Feb"]
p mon.size

mon.each do |key,val|
  p "#{key}=#{val}"
end
#+END_SRC

#+RESULTS:
: 1
: 2
: 2
: "Jan=1"
: "Feb=2"


*** exception handling

#+BEGIN_SRC ruby :results output raw
def square(n)
  if n>10 then
    raise RangeError, "ERROR"
  end
  return n*n
end

begin
  x = 1/0
  x = square(5)
  puts x
  x = square(15)
  puts x
rescue RangeError
  puts "ERROR:RangeError"
ensure
  x = 0
end

#+END_SRC    

#+RESULTS:
ERROR:ZeroDiv
25
ERROR:RangeError

*** class inheritance

#+BEGIN_SRC ruby :results output raw
class MyMember

  def initialize
    @name = "hoge"
  end

  def setName(str)
    @name = str
  end

  def getName
    @name
  end
end

class MyMember2 < MyMember
  @addr = "foga"
  def setAddr(str)
    @addr = str
  end

  def getAddr
    @addr
  end
end

puts obj = MyMember2.new
puts obj.getName
puts obj.setName("Tanaka")
puts obj.setAddr("Tokyo")
puts obj.getName
puts obj.getAddr
#+END_SRC    

#+RESULTS:
#<MyMember2:0x007f42f2836170>
hoge
Tanaka
Tokyo
Tanaka
Tokyo
#<MyMember2:0x007fc0379962f0>

Tanaka
Tokyo
Tanaka
Tokyo
Tanaka
Tokyo

* メタな視点

** 見えるもの
 
オブジェクト，クラス，メソッド がある

*** オブジェクト

- すべて，メッセージングで行なわれること
  - あるクラスのインスタンスを作ることも
- オブジェクトが実行する

*** クラス

- オープン・クラスであること
- クラスが開ける 

*** 定数

- 名前のついたオブジェクト
- オブジェクトにつけた名前
  

* 例題

** file_print.rb

あるファイルの

- 利用クラスライブラリ: File<IO
  - File.open, 
  - openされたファイルは，IOとして扱える
  - IO.read, 

#+BEGIN_SRC ruby :tangle ~suzuki/rubys/examples/file_print.rb :results output raw

def file_print(file_name)
  File.open(file_name) do |io|
    print (io.read)
  end
end

if __FILE__==$0

  ARGV.each do |file|
    file_print(file)
  end

end

file_print("ruby-begin.org")

#+END_SRC

C-c C-v C-t source code output to file
C-c C-c excute
C-c ' edit 

#+BEGIN_SRC ruby :results output raw

path = File.expand_path("~suzuki")

Dir.chdir(path) do 
  Dir.glob("*").each do |file|
    puts file
  end
end

#+END_SRC

#+BEGIN_SRC ruby :results output

path = File.expand_path("~suzuki")
p (files = Dir.glob("#{path}/*"))
p files.class
p files.size
p files[2..3]
files.each do |file| 
  p file
#+END_SRC


** home_directory.rb

#+BEGIN_SRC ruby :tangle ~suzuki/rubys/examples/home_directory.rb :results output raw :export both

def home_directory()
  home_path = File.expand_path("~")
  Dir.chdir(home_path) do 
    Dir.glob("*").each do |file|
       p file
    end
  end
end

home_directory

if __FILE__==$0

  ARGV.each do |file|
    file_print(file)
  end
end

#+END_SRC



** shuzo_meigen.rb

[[http://qiita.com/seiya1121/items/3dde2dae7319fe261323][Nokogiriで簡単なWebスクレイピング - Qiita]] を参考に

- IOの拡張としてのWebページ処理 'open-uri'
- 文字列の処理
- 構文解析
- gem を使う

  #+BEGIN_SRC sh
  gem install nokogiri
  #+END_SRC

#+BEGIN_SRC ruby :tangle ~suzuki/rubys/examples/shuzo_meigen.rb :results output raw :exports both

# coding:utf-8
require 'open-uri' 
require 'nokogiri' 

# URL，変更しました ((s-:))
url = 'http://earth-words.org/archives/2746' 
charset = nil

html = open(url) do |f|
  charset = f.charset 
  f.read 
end

# htmlを解析し、オブジェクト化
page = Nokogiri::HTML.parse(html, nil, charset) 

# 名言は<blockquote>タグに囲まれている
shuzo_meigen = page.search('blockquote') 

# shuzo_meigenで取得したデータをテキストに変換
shuzo_meigen.each do |phrase|
  print phrase.text.gsub("\r",'')
end

#+END_SRC

#+RESULTS:

一番になるっていったよな？
日本一なるっつったよな！ 
ぬるま湯なんか
つかってんじゃねぇよお前！！

100回叩くと
壊れる壁があったとする。
でもみんな何回叩けば
壊れるかわからないから、
90回まで来ていても
途中であきらめてしまう。

諦めんなよ!
諦めんなよ、お前！！ 
どうしてそこでやめるんだ、
そこで！！
もう少し頑張ってみろよ！ 
ダメダメダメ!諦めたら!
周りのこと思えよ、
応援してる人たちのこと
思ってみろって!
あともうちょっとの
ところなんだから!

本気になれば自分が変わる！ 
本気になれば全てが変わる！！

過去のことを
思っちゃダメだよ。
何であんなことしたんだろ…
って怒りに変わってくるから。 
未来のことも思っちゃダメ。
大丈夫かな、あはぁ～ん。 
不安になってくるでしょ？ 
ならば、一所懸命、
一つの所に命を懸ける！ 
そうだ！今ここを生きていけば、
みんなイキイキするぞ！！

もっと熱くなれよ…!!
熱い血燃やしてけよ…!!
人間熱くなったときが
ホントの自分に出会えるんだ！

言い訳してるんじゃないですか？ 
できないこと、無理だって、
諦めてるんじゃないですか？ 
駄目だ駄目だ！
あきらめちゃだめだ！ 
できる！できる！
絶対にできるんだから！

よく、時間が解決してくれる
と言うけれど、そうは思わない。
でも、行動した時間なら
解決してくれるはずだ。

わがままではなく、
あるがままに。

悔しがればいい、
泣けばいい、喜べばいい。
それが人間だ！

君が次に叩く１回で、
壁は打ち破れる
かもしれないんだ！

真剣に考えても、
深刻になるな！

反省はしろ！
後悔はするな！

勝ち負けなんか、
ちっぽけなこと。
大事なことは、
本気だったかどうかだ！

心の底から好きなことに
本気で取り組めるなら、
それは幸せ。

何よりも大切なのは、
あなた自身がどうしたいかだ。

家族は
　史上最強の味方だ！

一所懸命生きていれば、
不思議なことに疲れない。

勝敗を分けるのは
いつでもたった一球だ。
だが、プレーをしているときは、
どれがその一球か分からない。

偶然にもうまく
返せたように見える一球。
しかし、僕にとっては
何千球と練習をしたうちの一球だ。


** Directory の走査 (traverse)

*** あるディレクトリ配下のファイル名を一覧表示する。

#+BEGIN_SRC ruby :results output raw

def dir_tree_traverse(di)
  Dir.chdir(di) do
    Dir.glob("*").each do |f|
      p `pwd`+"/"+arg
      if File.directory?(f)
        dir_tree_traverse(di+"/"+f)
      end
    end
  end
end

if __FILE__==$0
  
  dir_tree_traverse(File.path_expand("~/working"))

end
#+END_SRC

- 再帰   


*** あるディレクトリ配下のファイル名を木構造表示する

    宿題

*** あるディレクトリ配下のあるファイル達に対し，何かする

入力
- dir :: ディレクトリ
- pattern :: ファイル名のパターン
- test :: 再帰を行なうかの検査 (関数)
- prog ::ファイルへの処理

#+BEGIN_SRC ruby :results output raw

def dir_tree_traverse(dir, pattern, test, proc)
  Dir.chdir(dir) do
    Dir.glob(pattern).each do |f|
      proc.call(f)
      if test.call(f)
        dir_tree_traverse(dir+"/"+f, pattern, test, proc)
      end
    end
  end
end

if __FILE__==$0

  tst = Proc.new { |arg| File.directory?(arg) }
  prc = Proc.new { |arg| p `pwd`+"/"+arg }
  dir_tree_traverse(".", "*", tst, prc)

end
#+END_SRC

#+RESULTS:

