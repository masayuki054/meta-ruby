* [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/meta-ruby/lects/02][2回目]] への補足

** Done announce サイトリニューアル中です。未整備なページ等あります。すみません。
   CLOSED: [2015-10-27 火 05:05]
           ご指摘ください。

** todo ruby情報ふたたび。
           : ~suzuki/lects/meta-ruby/org-docs/ruby_begin.org

** Done propose オブジェクトへ至る道を読みましょう。
   CLOSED: [2015-10-27 火 05:05]
   : ~suzuki/lects/meta-ruby/org-docs/oo.org

** todo ruby環境

** TODO ruby 入門始めましょう。
           : ~suzuki/lects/meta-ruby/lects/ruby_begin_note.org

** TODO emacs環境整えましょう。

           : ~suzuki/.emacs.d/init.el
           : ~suzuki/.emacs.d/config/emacs-ruby.el
           : ~suzuki/.emacs.d/config/emacs-org.el

** TODO emacs org-mode 憶えませんか？

           : ~suzuki/lects/meta-ruby/lects/02/
 
      
* Todo 講義資料の説明
  SCHEDULED: <2015-10-26 月>

  [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/meta-ruby/org-docs/][講義資料]] (([[file+emacs:~suzuki/lects/meta-ruby/site/org-docs/][@cis.org]] [[file+emacs:~/COMM/Lects/meta-ruby/site/org-docs/][@s.org]]))


* Doing オブジェクト指向とは
  SCHEDULED: <2015-10-05 月>

** Doing プログラム言語とは

*** Done 記述のための要素
    CLOSED: [2015-10-26 月 08:37]

   - 値と定数
   - データ構造体
   - 型と演算
   - 変数と代入
   - 文と流れ
   - 関数（手続き)
     - 定義
     - 呼出し
   - スコープ
   - モジュール

*** Todo 実行するということ

    - コードインタープリタ
    - 環境
      - 実行の流れを保存するスタック
      - 名前を解決する束縛
      - 静的か動的か

*** Todo メタプログラミング
    - プログラムを生成するプログラムをつくること


** Todo オブジェクト指向プログラミング
   [[https://ja.wikipedia.org/wiki/オブジェクト指向プログラミング][オブジェクト指向プログラミング]] (wikipedia)
   - カプセル化と情報隠蔽
   - 多相性
   - 動的束縛
   - 継承
     
** Todo 僕の考え
    - モジュール
    - メッセージパッシング
    - 差をプログラムする
    
** Todo Rubyらしさ

    - 純粋オブジェクト指向
      - プログラム可能なものは全て，オブジェクト
      - クラスもオブジェクト
      - 実行はすべてメッセージパッシングで起こる
    - オブジェクトは実行の場

** [[http://itpro.nikkeibp.co.jp/article/COLUMN/20060825/246409/][まつもと直伝プログラミングの掟]]
*** 第一回　http://itpro.nikkeibp.co.jp/article/COLUMN/20050831/220318/?ST=oss
    file:../docs/matz-1-1.org
    file:../docs/matz-1-2.org
    file:../docs/matz-1-3.org

    - 多相性 ::　一つの名前が，実行されるコンテキストで，違う意味を持
      ち得ること

*** 第二回，第三回，第四回　ぐらい読みたい
    - file:../docs/matz-2.org データ抽象と継承
    - file:../docs/matz-3.org 多重継承
    - file:../docs/matz-4.org ダックタイピング

    C++, Java, Perl, ... 


    まとめ


*** まつもと直伝プログラミングの掟のまとめ
    [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/meta-ruby/docs/matz][まとめ]]


* Ruby入門

  [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/meta-ruby/org-docs/ruby_begin.html][ruby入門]] (([[file+emacs:~suzuki/lects/meta-ruby/site/ruby-begin.org][@cis.org]] [[file+emacs:~/COMM/Lects/meta-ruby/site/ruby-begin.org][@s.org]]))


  site: http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/meta_ruby/ruby_begin.html
  org:  file:~suzuki/lects/meta-ruby/site/ruby_begin.org

  rbenv, gem, bundler
  
  gem pry install
  

* メタプログラミング Ruby


* lect record

#+BEGIN_SRC sh :results output 
ls

#+END_SRC

#+RESULTS:
#+begin_example
#today.org#
contents.org
index.html
index.html~
index.org
outline.org
plan-02.org
plan.org
prog.rb
today.org
#+end_example


#+BEGIN_SRC ruby :results output code :export both

print "hoge", "\n"
print 1+2,  "\n"

#+END_SRC

#+RESULTS:
#+BEGIN_SRC ruby
hoge
3
#+END_SRC





