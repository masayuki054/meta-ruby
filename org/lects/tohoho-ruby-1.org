** Ruby入門 - 構文

[[../www.htm][トップ]] > [[index.html][Ruby入門]] > 構文

**** Rubyの書き方

「Hello World!」を出力するプログラム

#+BEGIN_EXAMPLE
    puts "Hello World!\n"
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

**** [[][文・式]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

Perl, PHP, Javaなどでは、式(文)はセミコロン(;)で区切りますが、Ruby
では通常改行で区切ります。

#+BEGIN_EXAMPLE
    puts "Hello\n"
    puts "World\n"
#+END_EXAMPLE

ただし、セミコロン(*;*)を用いることで、複数の式を1行に記述することもできます。

#+BEGIN_EXAMPLE
    puts "Hello\n"; puts "World\n"
#+END_EXAMPLE

式の途中で改行したい場合、バックスラッシュ(*\*)を用います。

#+BEGIN_EXAMPLE
    ans = 1 + 2 + 3 + \
          4 + 5 + 6
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

**** [[][コメント(#)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*#* から行末の間はコメントとして解釈されます。

#+BEGIN_EXAMPLE
    <?php
    # ここはコメントになります。
    puts "ここは本文\n";
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

--------------

#+BEGIN_HTML
  <div>
#+END_HTML

Copyright(C) 2014 杜甫々

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div>
#+END_HTML

初版：2014年12月30日、最終更新：2014年12月30日

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div>
#+END_HTML

http://www.tohoho-web.com/ruby/syntax.html

#+BEGIN_HTML
  </div>
#+END_HTML
** Ruby入門 - 数値・文字列・型
*** [[][整数(Integer)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*整数*(*Integer*)は下記の様に記述します。

#+BEGIN_EXAMPLE
    num = 1234        // 正の整数
    num = -1234       // 負の整数
#+END_EXAMPLE

*0d*, *0x*, *0o*, *0b*
はそれぞれ、10進数、16進数、8進数、2進数を意味します。

#+BEGIN_EXAMPLE
    num = 0d1234       // 10進数 (0dで始まる数値は10進数とみなされる)
    num = 0xffff       // 16進数 (0xで始まる数値は16進数とみなされる)
    num = 0o777        //  8進数 (0oで始まる数値は 8進数とみなされる)
    num = 0b11000100   //  2進数 (0bで始まる数値は 2進数とみなされる)
#+END_EXAMPLE

数値の途中のアンダーバー(*\_*)は無視されます。これは、桁数の多い数値をわかりやすく表現する際に利用されます。

#+BEGIN_EXAMPLE
    num = 1_230_000_000       // 1,230,000,000
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][浮動小数点数(Float)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*浮動少数点数*(*Float*)は下記の様に記述します。

#+BEGIN_EXAMPLE
    num = 1.234     // 浮動小数点数
    num = 1.2e3     // 浮動小数点数(指数表記) 1.2 × 103
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][論理型(Boolean)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*論理値*(*Boolean*)は、*true* または *false*
で表します。これらは、TrueClass, FalseClass
クラスの唯一のインスタンスです。

#+BEGIN_EXAMPLE
    bool = true
    bool = false
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][文字列(String)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*文字列*(*String*)は、ダブルクォート(*"*)、またはシングルクォート(*'*)で囲みます。

#+BEGIN_EXAMPLE
    str = "Hello world"
    str = 'Hello world'
#+END_EXAMPLE

"..." の中では ' を、'...' の中では " を使うことができます。"..." の中で
" を、'...' の中で '
を使用するには、バックスラッシュ(*\*)を用いて引用符をエスケープ(無効化)します。

#+BEGIN_EXAMPLE
    str = "He said \"I'll be back.\""
    str = 'He said "I\'ll be back."'
#+END_EXAMPLE

"..."
の中では、後述のバックスラッシュ記法や、式展開を用いることができます。'...'
の中では \\ と \' のみが意味を持ちます。

#+BEGIN_EXAMPLE
    str = "My name is #{name}.\n"
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][エスケープシーケンス(\x)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

"..."
の中では、バックスラッシュ(*\*)を用いて、下記の*エスケープシーケンス*を使用できます。

#+BEGIN_EXAMPLE
    \t : タブ(TAB:0x09)
    \v : 垂直タブ(VT:0x0b)
    \n : 改行(ラインフィード:LF:0x0a)
    \r : キャリッジリターン(CR:0x0d)
    \f : フォームフィード(FF:0x0c)
    \b : バックスペース(BS:0x08)
    \a : ベル(BEL:0x07)
    \e : エスケープ(ESC:0x1b)
    \s : 空白(SPC:0x20)
    \\ : バックスラッシュ(\)
    \改行 : 改行(LF:0x0a)
    \nnn : 8進表記文字(nは0～7)
    \xnn : 16進表記文字(nは0～f)
    \unnnn : ユニコード文字nnnn (Ruby 1.9～)
    \u{nnnn} : ユニコード文字nnnn (Ruby 1.9～)
    \cx : コントロール文字(xはASCII文字)
    \C-x : コントロール文字(xはASCII文字)
    \M-x : メタ文字(xはASCII文字)
    \M-\C-x : メタコントロール
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][式展開(#{...})]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

文字列の中では、*#{式}* の形式で *式展開* することができます。

#+BEGIN_EXAMPLE
    name = "Tanaka"
    puts "My name is #{name}"          #=> My name is Tanaka

    x = 5; y = 3
    puts "Answer is #{ x + y }"        #=> Answer is 8
#+END_EXAMPLE

式が変数で、@ や $ で始まる場合は、{ } を省略することができます。

#+BEGIN_EXAMPLE
    puts "My name is #{@name}"
    puts "My name is #@name"
#+END_EXAMPLE

式展開を抑止するには、# の前にバックスラッシュ(*/*)を書きます。

#+BEGIN_EXAMPLE
    puts "You can use \#{expression} notation in the ruby string."
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][コマンド出力(`...`)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

バッククォート(*`*)で囲まれた文字列は、バックスラッシュ記法や式展開が行われた後、*コマンド出力*として実行され、コマンドの実行結果が文字列として返されます。

#+BEGIN_EXAMPLE
    puts `date`        # => Thu Sat 18 18:15:47 JST 2013
#+END_EXAMPLE

コマンドの終了ステータスを得るには、*$?* を参照します。

#+BEGIN_EXAMPLE
    date = `date`
    status = $?
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

*** [[][ヒアドキュメント(<<)]]

#+BEGIN_HTML
  <div class="i">
#+END_HTML

*ヒアドキュメント*(*<<識別子*)の構文を用いて、複数行の文字列を現すことができます。下記の例では、This
is ～
の2行が表示されます。識別子は、アンダーバー(\_)を含む半角英数字(最初の文字は数値以外)であれば何でも使用できます。

#+BEGIN_EXAMPLE
    print <<END_OF_STRING
    This is Japan.
    This is America.
    END_OF_STRING
#+END_EXAMPLE

最後の識別子のみの行は、行頭や行末にスペースを入れることが許されません。ただし、*<<-識別子*
の構文を用いると、先頭のスペースが許可されます。

#+BEGIN_EXAMPLE
      print <<-EOS
    This is Japan.
    This is America.
      EOS
#+END_EXAMPLE

識別子をダブルクォート(")、シングルクォート(')、バッククォート(`)で囲むと、それぞれ、"...",
'...', `...` で囲まれた文字列の様に振る舞います。ただし、"..." の中での
" や、'...' の中での ' はエスケープする必要はありません。

#+BEGIN_EXAMPLE
    print <<EOS            # Same as "EOS"
    My name is #{name}.
    EOS

    print <<"EOS"
    My name is #{name}.
    EOS

    print <<'EOS'
    You can use #{expression} notation.
    EOS

    print <<`EOS`
    date
    EOS
#+END_EXAMPLE

一度に複数のヒアドキュメントを使用することもできます。

#+BEGIN_EXAMPLE
    print <<FIRST, <<SECOND
      This is the first string.
    FIRST
      This is the second string.
    SECOND
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

--------------

#+BEGIN_HTML
  <div>
#+END_HTML

Copyright(C) 2014 杜甫々

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div>
#+END_HTML

初版：2014年12月30日、最終更新：2014年12月30日

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div>
#+END_HTML

http://www.tohoho-web.com/ruby/types.html


  </div>
#+END_HTML
