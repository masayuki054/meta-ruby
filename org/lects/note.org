* 講義へのメモ

ここには，((:-s)) の，講義前や講義後に思ったことを，書き留めてあります。

** 2016-12-12 へのメモ

- oo.org, oo-note.org を見せる

- strategic choice 

- meta-ruby つづき

- ~suzuki/meta-ruby.git/book@, ~suzuki/meta-ruby.git/codes@, 

- test-unit 始める
     
  
** 2016-12-05 へのメモ

- oo.org, oo-note.org を見せる

- strategic choice 

- meta-ruby 始める

- ~suzuki/meta-ruby.git/book@, ~suzuki/meta-ruby.git/codes@, 

- test-unit 始める
     

** 2016-11-28 へのメモ

[[http://www.tohoho-web.com/ruby/][とほほのRuby入門]]


   file://~suzuki/COMM/Lects/meta-ruby/2016/

- oo-note を見せる

- strategic choice 

- meta-ruby 始める

- ~suzuki/meta-ruby.git/book@, ~suzuki/meta-ruby.git/codes@, 
   
  

** 2016-11-21 へのメモ

- oo.org modular programming

  module としての「まとまり」の評価
  - call graph
  - lexical

- ruby begin tohoho

  文法とクラスライブラリ

- ruby practical programming

  - FileとIOと継承
  - Fileと特異メソッド
  - org-mode + babel
    - :tangle
    - execute
  - Directory
  - open-uri, nokogiri

- emacs org-babel の例

  lects/ruby-begin.org



** tohoho

- 構文 [/]
    - [ ] Rubyの書き方
    - [ ] 文・式
    - [ ] コメント(#) 

- 数値・文字列・型 [/]
    - [ ] 整数(Integer)
    - [ ] 浮動少数点数(Float)
    - [ ] 論理型(Boolean)
    - [ ] 文字列(String)
    - [ ] エスケープシーケンス(\x)
    - [ ] 式展開(#{...})
    - [ ] コマンド出力(`...`)
    - [ ] ヒアドキュメント(<<) 

- 変数・定数 [/]
    - [ ] 識別子
    - [ ] ローカル変数(var)
    - [ ] インスタンス変数(@var)
    - [ ] クラス変数(@@var)
    - [ ] グローバル変数($var)
    - [ ] 定数(CONST)
    - [ ] 擬似変数(true, false, nil, self) 

- 配列・ハッシュ・範囲 [/]
    - [ ] 配列(Array)
    - [ ] ハッシュ(Hash)
    - [ ] 範囲(Range) 

- [ ] 制御構文 [/]
    - [ ] もし～ならば(if, then, else, elsif)
    - [ ] もし～でなければ(unless, then)
    - [ ] ～のあいだ(while, do)
    - [ ] ～になるまでのあいだ(until, do)
    - [ ] ～のあいだ(for, in, do)
    - [ ] ～の場合(case, when)
    - [ ] ループを抜ける(break)
    - [ ] ループを繰り返す(next)
    - [ ] ループを繰り返す(redo)
    - [ ] 例外処理(raise, begin, rescue, else, ensure) 


** ruby program

   - fileの読み書き

   - fileの中身の変換
     - grep
     - 行の配列

   - Directory 操作
     - directory構造のコピー
       - 各ファイルになんらかの変更を加える
     - directory の木構造を印刷する

   Dir, File, Io, Array, String

** 2016.11.14へのメモ

- wiki https://github.com/masayuki054/meta-ruby/wiki

- [[http://www.tohoho-web.com/ruby/][とほほのRuby入門]] は，toorg しながらノートを

- toorg 
  - ~suzuki/COMM/Prog/elisp/toorg.el
  - ~suzuki/COMM/bin/toorg 

- [[http://wiki.cis.iwate-u.ac.jp/~wiki/eiffel.cgi?%e3%82%aa%e3%83%96%e3%82%b8%e3%82%a7%e3%82%af%e3%83%88%e6%8c%87%e5%90%91%e5%85%a5%e9%96%80%e3%81%ae%e3%81%be%e3%81%a8%e3%82%81   ][オブジェクト指向入門のまとめ]] にも言及
  - よいソフトウェアとは
  - 評価基準と原則
  - モジュール性

- OOへ至る道

** 2016.10.31~11.07 へのメモ

*** ruby tutorial

    - irb の使い方
    - run-ruby の使い方

*** oo.begin

    - ~/xxxx/oo.org

*** emacs 
    - org-mode
    - org-mode babel

** 2016.10.24 のメモ

   self => ~suzuki/meta-ruby.git/org/lects/note.org

*** emacsの設定

    - ruby-mode
    - org-mode

**** Emacs24.5日本語マニュアル登場！！info作成方法
     http://emacs.rubikitch.com/emacs245-manual-ja/

     suzuki@cis.iwate-u.ac.jp:local/info

**** #11 Emacs に革命を起こすパッケージ「helm」 (Software Design 2015年3月号掲載記事) Emacs helm インストール 設定 使い方
     http://emacs.rubikitch.com/sd1503-helm/

*** org-mode の紹介

    [[info:org]]

    http://orgmode.org/ja

**** #10 巨大なオーガナイズシステム「org-mode」の世界 (Software Design 2015年2月号掲載記事) Emacs org-mode インストール 設定 使い方
     http://emacs.rubikitch.com/sd1502-org-mode/

*** org-mode babel の紹介

  #+BEGIN_SRC ruby :exports both :results output
p 1.class
p "abc".class

  #+END_SRC

  #+RESULTS:
  : Fixnum
  : String


  



