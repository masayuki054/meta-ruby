* イントロダクション
** Ruby のメタプログラミングの例
   - 外部システムに接続する Rubyプログラムで，
     あらゆるメソッド呼び出しを受付，
     それを外部システムに送ることのできるラッパが書ける
   - DSLを Ruby を拡張することで実現する
   - Java プログラマには想像もできないレベルで，コードの重複の排除が可能
   - どんなクラスにも自分の欲しいメソッドが追加でき
   - 監視したいメソッドの始めと終わりにロギング機能を追加できる
   - 好きなクラスをすきな時に継承できる
 
** 頭文字 M
*** メタプログラミングとは
    コードを記述するコードを記述すること
**** コードジェネレータとコンパイラ
    コードジェネレータとコンパイラは静的メタプログラミング
    Rubyでは((* 動的メタプログラミングが可能 *))
    - 実行時に自分自身を操作するメタプログラミング

*** ゴーストタウンと市場
    ソースコードを活気ある住民であふれた世界と考える
    そこには ((* 変数 *))，((* クラス *))，((* メソッド *)) が住む
    それらを言語要素と呼ぼう
    多くのプログラミング言語で，言語要素は，肉体のないゴーストだ
    ソースコードに居るときは目に見えるが，
    実行時には姿が消える．まるでゴーストタウンだ．
    -  C++では実行時にインスタンスメソッドについて質問することはできない
    Rubyでは，実行時もにぎやかな市場だ
    
*** メタプログラマ ボブの物語
**** ボブの最初の試み
     introduction/orm.rb
     [[file:~/COMM/Prog/ruby/meta/introduction/orm.rb::class%20Entity][introduction/orm.rb]]
     オブジェクト関係マッピングを行うコード
     
**** メタプログラミングに突入
     introduction/orm-meta.rb
     [[file:~/COMM/Prog/ruby/meta/introduction/orm-meta.rb::class%20Entity][introduction/orm-meta.rb]]

*** 頭文字 M セカンドステージ
    メタプログラミングとは，言語要素を実行時に操作するコードを記述す
    ること
    ActiveRecord::Base を継承するだけで，
    実行時にアクセッサメソッドが定義できる
*** メタプログラミングと Ruby
    Ruby は現在，もっともメタプログラミングに適した言語

