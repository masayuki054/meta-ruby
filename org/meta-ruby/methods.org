\* メソッド

** 静的言語と動的言語，
   
静的言語

   - コンパイル時に，間違ったメソッドの使い方を指摘してくれる，かわり
     に，

   - コンパイル時に持っていないメソッドは使えない．動的な拡張性や柔軟性
     を欠く

   rubyは動的．

** 重複問題

   - コンピュータの各部品とそのコストの一覧を作成するレポート機能   
     
   - 少しだけ違うよく似たコードが山のように存在する

*** レガシーシステム DS

    [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/data_source.rb][computer/data_source.rb]]

    def get_#{objects}_#{properties}(id) の集り
    
*** ダブル，トリプル，トラブル

    よく似たコードの羅列

    DS クラスを Computer クラスのオブジェクトでラップする

    [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/boring.rb][computer/boring.rb]]
    - 異なるメソッド中の，よく似たコードの羅列

**** 重複コード排除のための二つの方針

     - 動的メソッド
     - method_missing()を使う


** 動的メソッドによる重複コードの排除

*** メソッドを動的に呼び出す

    [[file:~suzuki/COMM/Lects/meta-ruby/code/methods/dynamic_call.rb][dynamic_call.rb]]

    Object#send() によるメソッド呼び出し

    - obj.send(:my_method, 3)

      メソッド名に対応するシンボル値と，引数を与えて，
      obj.my_method(3) と同じ働きをする

      *動的ディスパッチ* という

**** Camping の例
    [[http://ja.wikipedia.org/wiki/YAML][YAML]] による属性値の設定
     admin : Bill
     title : Rubyland
     topic : Ruby and more
    
    ユーザは好きな属性が使える
    - conf.admin = 'Bill' ... のようなコードをあらかじめ用意できない

**** Test::Unit の例

    名前が test で始まるメソッドをテストメソッドとしている

    method_names = public_instance_methods(true)
    tests = method_names.delete_if { |method_name| method_name !~ /^test./}
    
    このtests配列のメソッドを，後で send を使って呼び出す

*** メソッドを動的に定義する

    Module#define_method() でメソッドをその場で定義する
    [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/dynamic_definition.rb][dynamic_definitioon.rb]]

    *動的メソッド* と呼ぶ

*** Computerクラスのリファクタリング
    もとのコード [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/boring.rb][computer/boring.rb]]  

**** 手順1 - 動的ディスパッチャの追加
     [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/send.rb][computer/send.rb]]
     component メソッドが動的ディスパッチャ
     

**** 手順2 - メソッドを動的に生成する
     [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/dynamic.rb][computer/dynamic.rb]]

     def self.define_component(name) ... 
     - クラスメソッド define_component の定義
     - define_component中 name の値の名前を持つメソッドを生成する

**** 手順3 - コードにイントロスペクションをふりかける
     [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/more_dynamic.rb][computer/more_dynamic.rb]]

** method_missing()による重複コードの排除

   ruby では存在しないメソッドも呼び出せる

   [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/method_missing.rb][method_missing.rb]] 存在しないメソッド呼び出しとエラー

   メソッド探索の仕組み  
   - レシーバの継承チェーン上のインスタンスメソッドを探す
   - なければ，レシーバのmethod_missing()メソッドを呼び出す
     - method_missing()はBasicObjectのインスタンスメソッド (ruby 1.9)

*** method_missing の *オーバーライド*
    [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/more_method_missing.rb][more_method_missing.rb]]

    ((*オーバーライド*))は，継承チェーン上に存在するメソッドを，
    再定義すること
    
    method_missing をオーバーライドして，
    実際には存在しないメソッドを呼び出せる

*** ghost method
    [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/ruport_example.rb][ruport_example.rb]]

**** openstruct

#+BEGIN_SRC ruby

require 'ostruct'
icecream = OpenStruct.new
icecream.flavor = "ストロベリー"
icecream.flavor

#+END_SRC
     
     属性メソッドがゴーストメソッド

     [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/my_ostruct.rb][my_ostruct.rb]]


*** 動的プロキシ
    - ゴーストメソッドは，ラッパーでよく使われる
    - メソッド呼び出しをmethod_missing()に集中させる
      ラップしたオブジェクトに投げる

**** Flicrの例

#+begin_src ruby
     require 'flickr'
     flickr = Flickr.new(YOUR_API_KEY)
     xml = flickr.tags_getListUser('user_id' => '59542755@N00')
     tags = xml['who']['tags']['tag'] 
     tags.grep /rails/
#+end_src 

     flickr はAPIが拡張された場合でも対応可能

#+begin_src ruby
     class Flickr
       def requrest(method, *params)
       response = XmlSimple.xml_in(http_get(request_url(method,
                       params)), {'ForceArray' => false})
       raise response['err']['msg'] if response['stat'] != 'ok'
       response
     end

     def method_missing(method_id, *params)
       request(method_id2name.gsub(/_/, '.'), params[0])
     end
     ...
#+end_src
     
     Flickr#method_missing() は名前を変更して，Flickr#request()に委譲

     *動的プロキシ*
     - オブジェクトがゴーストメソッドを受け取り，
     - 何らかの処理をして，
     - 他のオブジェクトに転送する

**** 委譲 (コラム)

     [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/delegator.rb]]
     
***** DelegateClass() は，ミミックメソッド  
      - 未定義のメソッド呼び出しを，
      - 与えられたクラス（のオブジェクト）に委譲する
      - クラスを返す

#+begin_src ruby
      frank = Assistant.new("Frank")
      anne = Manager.new(frank)
      anne.attend_meeting
      anne.read_email
      anne.check_schedule
#+end_src

      anne は理解できないメッセージをすべて frank に転送している

*** Computerクラスのリファクタリング

元のコード[[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/boring.rb]]

Computerクラスは動的プロキシになる

***** リファクタリングするぜ

[[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/proxy.rb]]

#+begin_src ruby
my_computer = Computer.new(42, DS.new)
my_computer.cpu
#+end_src

***** resopond_to?()のオーバーライド

      (({mouse()}))) は本物のメソッドではない．
      - ドキュメントには現れない
      - (({Object#methods}))にも登場しない
      - (({Computer}))クラスにゴーストメソッドはあるかと聞いても嘘を
        つく
#+begin_src ruby
	 cmp = Computer.new(0, DS.new)
	 cmp.respond_to?(:mouse)
#+end_src

****** (({respond_to?()}))のオーバーライド
       
#+begin_src ruby
       class Computer
         def respond_to?(name)
	   @data_source.respond_to?("get_#{method}_info") || super
	 end
       end
#+end_src

       superを呼び出すのは他のメソッドの面倒を見てもらうため

****** (({Object#methods()}))もオーバーライド？
       ？

**** リファクタリングのまとめ
       - 動的メソッドと動的ディスパッチ
	 DSのラッパーとして，イントロスペクションを使う
       - レガシーシステムに委譲

***** const_missing() (コラム)

      Module#const_missing() 存在しない定数を参照したとき呼ばれる
      任意のネームスペースに定義できる

#+begin_src ruby
      def Object.const_missing(name)
        name.to_s.downcase.gsub(/_/, ' ')
      end
#+end_src
      

** クイズ: バグ退治

   method_missing のバグは潰しにくい

   [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/bug_hunt.rb]]

   ブロック局所変数 number のスコープ

   [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/bug_hunt_solution.rb]]
   [bug_hunt_solution.rb]
   
** もっと method_missing()
*** メソッド名が衝突したら 
    
    : my_computer = Computer.new(42, DS.new)
    : my_computer.display # -> nil
    
    Computer#display()が nil を返すわけ
    
    : Object.instance_methods.grep /^d/

    Object#displayがみつかるため，method_missing にならない

    動的プロキシでも同じ問題が起こる

    ゴーストメソッド名と継承メソッド名の衝突が原因
    
    継承メソッドを消す

    - (({Module#undef_method()})) は全てのメソッドを消す
    - (({Module#remove_method()})) レシーバのメソッドのみ削除

**** パフォーマンスの不安

     ゴーストメソッドは通常のメソッドより(2倍)遅い

     [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/methods_benchmark.rb]]

**** Builderの例
     BuilderはXML生成ライブラリ

     [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/builder_example.rb]]

#+begin_src ruby 
class BlankSlate
  def self.hide(name)
    if instance_methos.include?(name.to_s) and
       name !~ /^(__|instance_eval)/
      @hidden_methods  !!= {}
      @hidden_methods[name.to_sym] = instance_metho(name)
      undef_method name
    end
  end
end
#+end_src

**** 予約済メソッド
     Objectのメソッドには Ruby が内部的に使うものがある．再定義すると
     おかしくなる．
     __send()__, __id__()

**** コンピュータクラスの修正

     [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/blank.rb]]

     [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/more_blank.rb]]

     
**** BasicObject
     Ruby1.9から *ブランクスレート* が言語に組み込まれた

     irb19で
     : p BasicObject.instance_methods

*** まとめ
    Computerクラスの重複をなくすリファクタリング
    *動的メソッド*
    *動的ディスパッチ* 
    *動的プロキシ*
    *ブランクスレート*

    [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/more_dynamic.rb]]

    [[file://~suzuki/COMM/Lects/meta-ruby/code/methods/computer/final.rb]]



    

* リソース
  [[https://github.com/hamamatsu-rb/hamamatsu-rb.github.com/wiki/メタプログラミングruby読書会][メタプログラミングruby読書会]]
  [[http://pragprog.com/titles/ppmetr/source_code][source code]]

