* [[http://morizyun.github.io/blog/ruby-design-pattern-10-singleton/][シングルトン]]

** 参考サイト

[[https://ja.wikipedia.org/wiki/Singleton_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3][Singleton パターン - Wikipedia]]

[[https://www.techscore.com/tech/DesignPattern/Singleton.html/][Singleton パターン | TECHSCORE(テックスコア)]]

** GoFのシングルトンの前提条件

- 作成したクラスは唯一1つだけのインスタンスを自身で作成する

- システム内のどこでもその1つだけのインスタンスにアクセスできる

** クラス図

plantuml で描いてみます:

#+BEGIN_SRC plantuml :file ~/meta-ruby.git/docs/Figs/class-diagram/singleton.png :mkdirp yes :exports both
class mySingleton {
  -mysingleton
  -include(Singleton) Singletonインタフェースをとりこむ
  -new() プライベートメソッドに
  +#instance()
}

#+END_SRC

#+RESULTS:
[[file:~/meta-ruby.git/docs/Figs/class-diagram/singleton.png]]

[[elisp:(org-toggle-inline-images)]] で image の表示をon/off 

** ruby の Singleton モジュール

   [[https://docs.ruby-lang.org/ja/latest/class/Singleton.html][module Singleton (Ruby 2.4.0)]]

** サンプルソース

シングルトンパターンのサンプルを作成していきます。

ここでは、Rubyの標準ライブラリであるSingletonモジュールを使います。 こ
のSingletonモジュールを使うことで、Mix-inしたクラスのインスタンスは常
に同一のものを返すようになります。

#+BEGIN_SRC ruby :tangle singleton/singleron.rb :mkdirp yes

# Singletonは、Mix-inしたクラスのinstanceは同一のインスタンスを返すようになる
require 'singleton'

# シングルトン
class SingletonObject
  # instanceメソッドが定義され、newメソッドがprivateに設定される
  include Singleton
  attr_accessor :counter

  def initialize
    @counter = 0
  end
end
#+END_SRC

#+BEGIN_SRC ruby :tangle singleton/singleton.rb :mkdirp yes

require './singleton/singleton.rb'

obj1 = SingletonObject.instance
obj1.counter += 1
puts(obj1.counter) #=> 1

obj2 = SingletonObject.instance
obj2.counter += 1
puts(obj2.counter) #=> 2

#+END_SRC


Singletonの条件を満たすオブジェクトを生成できている事がわかります。 ま
た、Object#newが失敗することも次のコードで確認できます。

	

obj3 = SingletonObject.new
# private method `new' called for SingletonObject:Class (NoMethodError)
# ↑ newでのインスタンスの作成に失敗

説明は以上です。 このサンプルソースはGitHubにも置いています。

** 他の例

   [[http://qiita.com/kasei-san/items/3d3e13cf6f3d598dcceb][Singleton パターン - Qiita]]


