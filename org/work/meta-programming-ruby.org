* オブジェクト・モデルのまとめ

** オブジェクトとは何か?

   メッセージを実行する主体

   - メソッド名の検索 => メソッド・ブロック

   - メソッド・ブロックの実行

   - 実行環境 
     - ブロック
       - 局所変数，定数 (ブロックのモジュール構造)
     - self オブジェクト
       - 自身の状態(インスタンス変数)の保持
       - self.class
	 - メソッド表
	 - クラス変数，定数
     - 制御用スタック
       - call/return
       - catch/throw

** オブジェクトにとって，クラスとは何か?

   - オブジェクトは，あるクラスのインスタンス

     - クラスがオブジェクトを生み出す class.new
       - オブジェクト自身が初期化 (class.new).initialize
       - (class.new).class == class

   - 実行できるメソッドを定める検索表

   - 継承を実現 class.super, class.ancestors

     クラス階層ができる

** クラス・オブジェクトとは何か?

   - Classクラスのインスタンス。クラスでありオブジェクトでもあるというこ
     と。
   - class 文脈でブロックを実行するオブジェクト

** クラス・メソッドとは何か?

   クラス・オブジェクトが実行できるメソッド。

   - Classクラスのインスタンス・メソッド +
   - そのクラス・オブジェクトだけが実行できるメソッド。
     
     *クラス・オブジェクトの特異メソッド*

** クラス・オブジェクトにとって，そのクラスとは何か?

   メタクラス階層
   - Class へ至る，クラス・オブジェクトの特異メソッドの階層
   - Class からの拡張の階層とも言える



* メタクラスを見るプログラミング

** クラス階層と特異クラス，，そしてメタクラス階層

オブジェクト，モジュール，クラスオブジェクトがある。

オブジェクトには，属するクラス(.class) がある。
オブジェクトには，そのオブジェクだけが属する特異クラス
(.singleton_class) を定義できる。

クラスには，継承してくるクラス(.superclass)がある。

クラスオブジェクトには，.class, .singleton_class，.superclass, .instance_methods




#+BEGIN_SRC ruby :results output :tangle babel/meta-class-hierarchy.rb

def class_hi(c)
  if c == BasicObject
     [BasicObject]
  else
    [c] + class_hi(c.superclass)
  end
end


class Myclass_1

  @@myclass_1 = 'myclass_1'

  def m_1; 'm_1'; end

  def self.m_1; 'self.m_1'; end
end

module Mymodule
  def mymod_m_1
  end
end

class Myclass_2 < Myclass_1
  include Mymodule

  @@myclass_2 = 'myclass_2'

  def m_2; 'm_2'; end

  def self.m_2; 'self.m_2'; end
end

p o1 = Myclass_1.new
# #<Myclass_1:0x007f8243199110>

p o2 = Myclass_2.new
# #<Myclass_2:0x007f8243199020>

p "class 階層"

p o1.class.ancestors
# [Myclass_1, Object, Kernel, BasicObject]
p o2.class.ancestors
# [Myclass_2, Mymodule, Myclass_1, Object, Kernel, BasicObject]

p o2.singleton_class

p "特異メソッドの定義"

def o2.my_singleton_method; self; end

p "特異クラスの存在"

p o2.singleton_class
# #<Class:#<Myclass_2:0x007fc26409ce18>>

p "# 特異クラスに定義された特異メソッド"
p (o2.singleton_class).instance_methods(nil)
# [:my_singleton_method]
p (o2.class).instance_methods
# [:m_2, :mymod_m_1, :m_1, :nil?, :===, :=~, :!~, :eql?, :hash, :<=>, :class, :singleton_class, :clone, :dup, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :freeze, :frozen?, :to_s, :inspect, :methods, :singleton_methods, :protected_methods, :private_methods, :public_methods, :instance_variables, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :remove_instance_variable, :instance_of?, :kind_of?, :is_a?, :tap, :send, :public_send, :respond_to?, :extend, :display, :method, :public_method, :define_singleton_method, :object_id, :to_enum, :enum_for, :==, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]

p "# クラスオブジェクトのクラス階層 (メタクラス階層)"

p class_hi(o2.class)
# [Myclass_2, Myclass_1, Object, BasicObject]

p (o2.class).ancestors
# [Myclass_2, Mymodule, Myclass_1, Object, Kernel, BasicObject]

p class_hi(o2.class.singleton_class)
# [#<Class:Myclass_2>, #<Class:Myclass_1>, #<Class:Object>, #<Class:BasicObject>, Class, Module, Object, BasicObject]

#+END_SRC

* pry でみる method の実装

** pry install
： server% gem install pry pry-doc

** pry show-method

： server% pry
： [3] pry(main)> show-method Class.superclass

: From: object.c (C Method):
: Owner: Class
: Visibility: public
: Number of lines: 17
: 
: VALUE
: rb_class_superclass(VALUE klass)
: {
:     VALUE super = RCLASS_SUPER(klass);
: 
:     if (!super) {
: 	if (klass == rb_cBasicObject) return Qnil;
: 	rb_raise(rb_eTypeError, "uninitialized class");
:     }
:     while (RB_TYPE_P(super, T_ICLASS)) {
: 	super = RCLASS_SUPER(super);
:     }
:     if (!super) {
: 	return Qnil;
:     }
:     return super;
: }

*** ancestors

: [5] pry(main)> show-method Module.ancestors
: 
: From: class.c (C Method):
: Owner: Module
: Visibility: public
: Number of lines: 15
: 
: VALUE
: rb_mod_ancestors(VALUE mod)
: {
:     VALUE p, ary = rb_ary_new();
: 
:     for (p = mod; p; p = RCLASS_SUPER(p)) {
: 	if (BUILTIN_TYPE(p) == T_ICLASS) {
: 	    rb_ary_push(ary, RBASIC(p)->klass);
: 	}
: 	else if (p == RCLASS_ORIGIN(p)) {
: 	    rb_ary_push(ary, p);
: 	}
:     }
:     return ary;
: }


*** include 

: [9] pry(main)> show-method Module.include
: 
: From: eval.c (C Method):
: Owner: Module
: Visibility: public
: Number of lines: 17
: 
: static VALUE
: rb_mod_include(int argc, VALUE *argv, VALUE module)
: {
:     int i;
:     ID id_append_features, id_included;
: 
:     CONST_ID(id_append_features, "append_features");
:     CONST_ID(id_included, "included");
: 
:     for (i = 0; i < argc; i++)
: 	Check_Type(argv[i], T_MODULE);
:     while (argc--) {
: 	rb_funcall(argv[argc], id_append_features, 1, module);
: 	rb_funcall(argv[argc], id_included, 1, module);
:     }
:     return module;
: }

*** new

: [10] pry(main)> show-method Class.new
: 
: From: object.c (C Method):
: Owner: Class
: Visibility: public
: Number of lines: 10
: 
: VALUE
: rb_class_new_instance(int argc, const VALUE *argv, VALUE klass)
: {
:     VALUE obj;
: 
:     obj = rb_obj_alloc(klass);
:     rb_obj_call_init(obj, argc, argv);
: 
:     return obj;
: }
