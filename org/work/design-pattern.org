* [[http://morizyun.github.io/blog/ruby-design-pattern-matome-mokuzi/][Ruby2.0.0で学ぶ、14個のデザインパターン]]

** GoFのデザインパターンとは、

「プログラミングのベストプラクティスを体系化したもの」です。

- しっかりと理解して設計すれば、ソフトウエア設計の効率を高めることがで
  きます。

- またデザインパターンが「プログラミングの思想」の共有をよりスムーズに
  してくれます。

- 先人たちの試行錯誤の結果です。
  
** デザインパターンの重要要素

GoFのデザインパターンには下のプリンシパルがあります：

   - 変わるものを変わらないものから分離する 

   - インターフェイスに対してプログラミングし、実装に対して行わない 

   - 継承より集約 

   - 委譲、委譲、委譲 

   - 必要になるまで作るな (You Ain’t Gonna Need It./YAGNI) 

** 各デザインパターンの説明

*** 生成に関するパターン

    - アブストラクトファクトリ/Abstract Factory 
    - ビルダー/Builder 
    - ファクトリメソッド/Factory Method 
    - シングルトン/Singleton 

*** 構造に関するパターン

    - アダプタ/Adapter 
    - コンポジット/Composite 
    - デコレータ/Decorator 
    - プロクシ/Proxy 

*** 振る舞いに関するパターン

    - コマンド/Command 
    - インタープリタ/Interpreter 
    - イーテレータ/Iterator 
    - オブザーバ/Observer 
    - ストラテジ/Strategy 
    - テンプレートメソッド/Template Method 

*** abstractFactory 

#+BEGIN_SRC ruby :tangle abstract_factory/duck_and_frog.rb :mkdirp yes
class Duck
  def initialize(name)
    @name = name
  end

  def eat
    puts "duck #{@name} は食事中です."
  end
end

class Frog
  def initialize(name)
    @name = name
  end

  def eat
    puts "frog #{@name} は食事中です."
  end
end
#+END_SRC    

#+BEGIN_SRC ruby :tangle abstract_factory/waterlily_and_algae.rb

class Algae
  def initialize(name)
    @name = name
  end

  def grow
    puts("藻 #{name} は成長中です.")
  end
  
end

class WaterLily
  def initialize(name)
    @name = name
  end

  def grow
    puts("睡蓮 #{name} は成長中です.")
  end
  
end
#+END_SRC

#+BEGIN_SRC ruby :tangle abstract_factory/organism_factory.rb
class OrganismFactory
  def initialize(number_animals, number_plants)
    @animals = []
    number_animals.times do |i|
      animal = new_animal("動物#{i}")
      @animals << animal 
    end

    @plants = []
    number_plants.times do |i|
      plant = new_plant("動物#{i}")
      @plants << plant 
    end
  end

  def get_plats
    @plants
  end

  def get_animals
    @animals
  end
  
end

class FrogAndALgaeFactory < OrganismFactory
  private

  def new_animal(name)
    Frong.new(name)
  end

  def new_plant(name)
    Algae.new(name)
  end
end

class DuckAndWaterLilyFactory < OrganismFactory
  private

  def new_animal(name)
    Duck.new(name)
  end


  def new_plant(name)
    WaterLily.new(name)
  end
end

#+END_SRC


#+BEGIN_SRC ruby
require 'duck_and_frog.rb'
require 'organism_factory.rb'
require 'waterlily_and_algae.rb'



#+END_SRC
