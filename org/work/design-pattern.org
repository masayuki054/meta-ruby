* [[http://morizyun.github.io/blog/ruby-design-pattern-matome-mokuzi/][Ruby2.0.0で学ぶ、14個のデザインパターン]] を学ぶ

** emacs org-mode でまとめる

   emacs org-mode を使って学んだことをまとめましょう。

   literate programming や 図の埋め込みなど，
  [[emacs.org]] を参考にしてください。

** UML を知る

   [[http://objectclub.jp/technicaldoc/uml/umlintro2#class][UML超入門_第2章]]

   http://plantuml.com


** GoFのデザインパターンとは、

「プログラミングのベストプラクティスを体系化したもの」です。

- しっかりと理解して設計すれば、ソフトウエア設計の効率を高めることがで
  きます。

- またデザインパターンが「プログラミングの思想」の共有をよりスムーズに
  してくれます。

- 先人たちの試行錯誤の結果です。
  

** デザインパターンの重要要素

GoFのデザインパターンには下のプリンシパルがあります：

   - 変わるものを変わらないものから分離する 

   - インターフェイスに対してプログラミングし、実装に対して行わない 

   - 継承より集約 

   - 委譲、委譲、委譲 

   - 必要になるまで作るな (You Ain’t Gonna Need It./YAGNI) 

** デザインパターンの分類

*** 生成に関するパターン

    - [[http://morizyun.github.io/blog/ruby-design-pattern-14-abstract-factory/][アブストラクトファクトリ/Abstract Factory]]

    - ビルダー/Builder 
    - [[http://morizyun.github.io/blog/ruby-design-pattern-11-factory-method/][ファクトリメソッド/Factory Method]]
    - シングルトン/Singleton 

*** 構造に関するパターン

    - アダプタ/Adapter 
    - コンポジット/Composite 
    - デコレータ/Decorator 
    - プロクシ/Proxy 

*** 振る舞いに関するパターン

    - コマンド/Command 
    - インタープリタ/Interpreter 
    - イーテレータ/Iterator 
    - オブザーバ/Observer 
    - ストラテジ/Strategy 
    - テンプレートメソッド/Template Method 


** [[http://morizyun.github.io/blog/ruby-design-pattern-10-singleton/][シングルトン]]

*** 参考サイト

[[https://ja.wikipedia.org/wiki/Singleton_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3][Singleton パターン - Wikipedia]]

[[https://www.techscore.com/tech/DesignPattern/Singleton.html/][Singleton パターン | TECHSCORE(テックスコア)]]

*** GoFのシングルトンの前提条件

- 作成したクラスは唯一1つだけのインスタンスを自身で作成する

- システム内のどこでもその1つだけのインスタンスにアクセスできる

*** クラス図

plantuml で描いてみます:

#+BEGIN_SRC plantuml :file ~/meta-ruby.git/docs/Figs/class-diagram/singleton.png :mkdirp yes :exports both
class mySingleton {
  -mysingleton
  -include(Singleton) Singletonインタフェースをとりこむ
  -new() プライベートメソッドに
  +#instance()
}

#+END_SRC

#+RESULTS:
[[file:~/meta-ruby.git/docs/Figs/class-diagram/singleton.png]]

[[elisp:(org-toggle-inline-images)]] で image の表示をon/off 

*** ruby の Singleton モジュール

    [[https://docs.ruby-lang.org/ja/latest/class/Singleton.html][module Singleton (Ruby 2.4.0)]]

*** サンプルソース

シングルトンパターンのサンプルを作成していきます。

ここでは、Rubyの標準ライブラリであるSingletonモジュールを使います。 こ
のSingletonモジュールを使うことで、Mix-inしたクラスのインスタンスは常
に同一のものを返すようになります。

#+BEGIN_SRC ruby :tangle singleton/singleron.rb :mkdirp yes

# Singletonは、Mix-inしたクラスのinstanceは同一のインスタンスを返すようになる
require 'singleton'

# シングルトン
class SingletonObject
  # instanceメソッドが定義され、newメソッドがprivateに設定される
  include Singleton
  attr_accessor :counter

  def initialize
    @counter = 0
  end
end
#+END_SRC

#+BEGIN_SRC ruby :tangle singleton/singleton.rb :mkdirp yes

require './singleton/singleton.rb'

obj1 = SingletonObject.instance
obj1.counter += 1
puts(obj1.counter) #=> 1

obj2 = SingletonObject.instance
obj2.counter += 1
puts(obj2.counter) #=> 2

#+END_SRC


Singletonの条件を満たすオブジェクトを生成できている事がわかります。 ま
た、Object#newが失敗することも次のコードで確認できます。

	

obj3 = SingletonObject.new
# private method `new' called for SingletonObject:Class (NoMethodError)
# ↑ newでのインスタンスの作成に失敗

説明は以上です。 このサンプルソースはGitHubにも置いています。

*** 他の例

    [[http://qiita.com/kasei-san/items/3d3e13cf6f3d598dcceb][Singleton パターン - Qiita]]


** [[http://morizyun.github.io/blog/ruby-design-pattern-12-builder/][ビルダー]]

*** 参考サイト
     [[http://jetglass.hatenablog.jp/entry/2015/04/02/151034][Rubyによるデザインパターン【Builder】 - Shred IT!!!!]] この説明がわか
     りやすい
   
     http://morizyun.github.io/blog/ruby-design-pattern-12-builder/


*** 場面
ビルダーパターンは次のような場面で使われます。

- オブジェクトの生成に大量のコードが必要
- オブジェクトを作り出すのが難しい
- オブジェクト生成時に必要なチェックを行いたい

*** ビルダーとは？

ビルダーは、作成過程を決定する「Director」 と作業インターフェースを持
つ「Builder」を組み合わせることで、柔軟にオブジェクトを生成をすること
ができるデザインパターンです。

ビルダーには次の３つの構成要素があります。

- ディレクタ(Director)：Builderで提供されているインタフェースのみを使用して処理を行う
- ビルダー(Builder)：各メソッドのインタフェースを定める
- 具体ビルダー(ConcreteBuilder)：Builderが定めたインタフェースの実装

*** サンプル1

class図 のみ示し，ソースコードの説明は省きます:

 #+BEGIN_SRC plantuml :file class-diagram/sugar-water-builder.png :mkdirp yes :export both
class SugarWater {
  - @water
  - @sugar
  - initialize(water,sugar)
  + water()
  + sugar()
}

class  SugarWaterBuilder {
  - initialize(sugar_amount)
  + add_sugar()
  + add_water()
  + result()
}

class Director {
  - initialize(builder)
  + cook()
}

Director o-- SugarWaterBuilder
SugarWaterBuilder o-- SugarWater
 #+END_SRC

 #+RESULTS:
 [[file:class-diagram/sugar-water-builder.png]]

*** サンプルソース2

 #+BEGIN_SRC plantuml :file class-diagram/material-water-builder.png :mkdirp yes :exports both

class SaltWater {
note "塩水クラス :ビルダーの実装部分"
  + @water, @salt
  + add_material(salt_amount)
}

class SugarWater {
note "砂糖水クラス: ビルダーの実装部分"
  + @water, @sugar
  + add_material(sugar_amount)
}


class WaterWithMaterialBuilder <<interface>> {
note "加工水クラス"
  + add_material(material_amount)
  + add_water(water_amount)
  + result()
}

class Director {
note "Director: 加工水の作成過程を取り決める"
   + cook()
}

Director o--> WaterWithMaterialBuilder
WaterWithMaterialBuilder<|-->SugarWater
WaterWithMaterialBuilder<|-->SaltWater


 #+END_SRC

 #+RESULTS:
 [[file:class-diagram/material-water-builder.png]]


#+BEGIN_SRC ruby :tangle builder-pattern/builders/saltwater.rb :mkdirp yes
# -*- coding: utf-8 -*-

# SaltWater: 塩水クラス (ConcreteBuilder：ビルダーの実装部分)
class SaltWater
  attr_accessor :water, :salt
  def initialize(water, salt)
    @water = water
    @salt = salt
  end

  # 素材(ここでは塩)を加える
  def add_material(salt_amount)
    @salt += salt_amount
  end
end
 #+END_SRC

 #+BEGIN_SRC ruby :tangle builder-pattern/builders/sugarwater.rb
# -*- coding: utf-8 -*-

# SugarWater: 砂糖水クラス (ConcreteBuilder：ビルダーの実装部分)
class SugarWater
  attr_accessor :water, :sugar
  def initialize(water, sugar)
    @water = water
    @sugar = sugar
  end

  # 素材(ここでは砂糖)を加える
  def add_material(sugar_amount)
    @sugar += sugar_amount
  end
end
 #+END_SRC

 #+BEGIN_SRC ruby :tangle builder-pattern/builder.rb
# -*- coding: utf-8 -*-

# 加工水クラス (Builder)
class WaterWithMaterialBuilder
  def initialize(class_name)
    @water_with_material = class_name.new(0,0)
  end

  # 素材を入れる
  def add_material(material_amount)
    @water_with_material.add_material(material_amount)
  end

  # 水を加える
  def add_water(water_amount)
    @water_with_material.water += water_amount
  end

  # 加工水の状態を返す
  def result
    @water_with_material
  end
end
 #+END_SRC

 #+BEGIN_SRC ruby :tangle builder-pattern/director.rb
# -*- coding: utf-8 -*-

# Director: 加工水の作成過程を取り決める
class Director
  def initialize(builder)
    @builder = builder
  end
  def cook
    @builder.add_water(150)
    @builder.add_material(90)
    @builder.add_water(300)
    @builder.add_material(35)
  end
end
 #+END_SRC

 #+BEGIN_SRC ruby :tangle builder-pattern/test_builder-pattern.rb
# -*- coding: utf-8 -*-
builder = WaterWithMaterialBuilder.new(SugarWater)
director = Director.new(builder)
director.cook

p builder.result
#=> #<SugarWater:0x007fc773085bc8 @water=450, @sugar=125>

builder = WaterWithMaterialBuilder.new(SaltWater)
director = Director.new(builder)
director.cook

p builder.result
#=> #<SaltWater:0x007f92cc103ba8 @water=450, @salt=125>
 #+END_SRC


#+BEGIN_EXAMPLE
+-builder-pattern-+-builder.rb
|                 +-builders-+-saltwater.rb
|                 |          +-sugarwater.rb
|                 +-director.rb
|                 +-test_builder-pattern.rb

#+END_EXAMPLE

** [[http://morizyun.github.io/blog/ruby-design-pattern-14-abstract-factory/][アブストラクトファクトリ/Abstract Factory]]

#+BEGIN_EXAMPLE
+-abstract_factory-+-animal.rb
|                  +-animals-+-duck.rb
|                  |         +-frog.rb
|                  |         +-frog.rb~
|                  +-do_duck_and_waterlily_factory.rb
|                  +-do_frog_and_algae_factory.rb
|                  +-organism_factories-+-#frog_and_algae.rb#
|                  |                    +-duck_and_waterlily.rb
|                  |                    +-frog_and_algae.rb
|                  |                    +-frog_and_algae.rb~
|                  +-organism_factory.rb
|                  +-plant.rb
|                  +-plants-+-algae.rb
|                           +-waterlily.rb

#+END_EXAMPLE

*** concrete animals

#+BEGIN_SRC ruby :tangle abstract_factory/animals/duck.rb :mkdirp yes
require 'abstract_factory/animal'

class Duck < Animal
  def initialize(name)
    @name = name
  end

  def eat
    puts "duck #{@name} は食事中です."
    super
  end
end
#+END_SRC    

#+BEGIN_SRC ruby :tangle abstract_factory/animals/frog.rb :mkdirp yes
require 'abstract_factory/animal'

class Frog < Animal
  def initialize(name)
    @name = name
  end

  def eat
    puts "frog #{@name} は食事中です."
    super
  end
end
#+END_SRC    


*** 具体的な植物達

#+BEGIN_SRC ruby :tangle abstract_factory/plants/algae.rb :mkdirp yes
require 'abstract_factory/plant'
class Algae < Plant
  def initialize(name)
    @name = name
  end

  def grow
    puts("藻 #{@name} は成長中です.")
    super
  end
  
end
#+END_SRC

#+BEGIN_SRC ruby :tangle abstract_factory/plants/waterlily.rb :mkdirp yes
require 'abstract_factory/plant'

class WaterLily < Plant
  def initialize(name)
    @name = name
  end

  def grow
    puts("睡蓮 #{@name} は成長中です.")
  end
  
end
#+END_SRC

*** 抽象的な OrgamismFactory, Animal, Plant

#+BEGIN_SRC ruby :tangle abstract_factory/animal.rb :mkdirp yes
class Animal

  def eat
    puts "Animalは食べるものですから。"
  end
  
end
#+END_SRC

#+BEGIN_SRC ruby :tangle abstract_factory/plant.rb :mkdirp yes
class Plant

  def grow
    puts "Plant は成長するものですから。"
  end
  
end
#+END_SRC

#+BEGIN_SRC ruby :tangle abstract_factory/organism_factory.rb
class OrganismFactory
  def initialize(number_animals, number_plants)
    @animals = []
    number_animals.times do |i|
      animal = new_animal("動物#{i}")
      @animals << animal 
    end

    @plants = []
    number_plants.times do |i|
      plant = new_plant("植物#{i}")
      @plants << plant 
    end
  end

  def get_plants
    @plants
  end

  def get_animals
    @animals
  end
  
end
#+END_SRC
*** 具体的な OrganismFactory

#+BEGIN_SRC ruby :tangle abstract_factory/organism_factories/frog_and_algae.rb :mkdirp yes
require 'abstract_factory/organism_factory'
require 'abstract_factory/animals/frog.rb'
require 'abstract_factory/plants/algae.rb'

class FrogAndAlgaeFactory < OrganismFactory
  private

  def new_animal(name)
    Frog.new(name)
  end

  def new_plant(name)
    Algae.new(name)
  end
end
#+END_SRC

#+BEGIN_SRC ruby :tangle abstract_factory/organism_factories/duck_and_waterlily.rb :mkdirp yes
require 'abstract_factory/organism_factory'
require 'abstract_factory/animals/frog.rb'
require 'abstract_factory/plants/algae.rb'

class DuckAndWaterLilyFactory < OrganismFactory
  private

  def new_animal(name)
    Duck.new(name)
  end

  def new_plant(name)
    WaterLily.new(name)
  end
end

#+END_SRC


#+BEGIN_SRC ruby :tangle abstract_factory/do_frog_and_algae_factory.rb :results output
$: << "."

require 'abstract_factory/organism_factory'
require 'abstract_factory/organism_factories/frog_and_algae'
require 'abstract_factory/animals/frog'
require 'abstract_factory/plants/algae'


factory = FrogAndAlgaeFactory.new(4,1)
animals = factory.get_animals
animals.each do |animal| 
  animal.eat
end

plants = factory.get_plants
plants.each do |plant|
  plant.grow
end


#+END_SRC

#+RESULTS:
#+begin_example
frog 動物0 は食事中です.
Animalは食べるものですから。
frog 動物1 は食事中です.
Animalは食べるものですから。
frog 動物2 は食事中です.
Animalは食べるものですから。
frog 動物3 は食事中です.
Animalは食べるものですから。
藻 植物0 は成長中です.
Plant は成長するものですから。
#+end_example


#+BEGIN_SRC ruby :tangle abstract_factory/do_duck_and_waterlily_factory.rb :results output
$: << "."

require 'abstract_factory/organism_factory'
require 'abstract_factory/organism_factories/duck_and_waterlily'
require 'abstract_factory/animals/duck'
require 'abstract_factory/plants/waterlily'

factory = DuckAndWaterLilyFactory.new(4,1)
animals = factory.get_animals
animals.each do |animal| 
  animal.eat
end

plants = factory.get_plants
plants.each do |plant|
  plant.grow
end


#+END_SRC

#+RESULTS:
: duck 動物0 は食事中です.
: Animalは食べるものですから。
: duck 動物1 は食事中です.
: Animalは食べるものですから。
: duck 動物2 は食事中です.
: Animalは食べるものですから。
: duck 動物3 は食事中です.
: Animalは食べるものですから。
: 睡蓮 植物0 は成長中です.

