* [[http://morizyun.github.io/blog/ruby-design-pattern-matome-mokuzi/][Ruby2.0.0で学ぶ、14個のデザインパターン]] を学ぶ

** emacs org-mode でまとめる

   emacs org-mode を使って学んだことをまとめましょう。

   literate programming や 図の埋め込みなど，
   [[./emacs.org][emacsh]] を参考にしてください。

** UML を知る

   [[http://objectclub.jp/technicaldoc/uml/umlintro2#class][UML超入門_第2章]]

   http://plantuml.com


** GoFのデザインパターンとは、

「プログラミングのベストプラクティスを体系化したもの」です。

- しっかりと理解して設計すれば、ソフトウエア設計の効率を高めることがで
  きます。

- またデザインパターンが「プログラミングの思想」の共有をよりスムーズに
  してくれます。

- 先人たちの試行錯誤の結果です。
  

** デザインパターンの重要要素

GoFのデザインパターンには下のプリンシパルがあります：

   - 変わるものを変わらないものから分離する 

   - インターフェイスに対してプログラミングし、実装に対して行わない 

   - 継承より集約 

   - 委譲、委譲、委譲 

   - 必要になるまで作るな (You Ain’t Gonna Need It./YAGNI) 

** デザインパターンの分類

*** 生成に関するパターン

    - [[http://morizyun.github.io/blog/ruby-design-pattern-14-abstract-factory/][アブストラクトファクトリ/Abstract Factory]]

    - ビルダー/Builder 
    - [[http://morizyun.github.io/blog/ruby-design-pattern-11-factory-method/][ファクトリメソッド/Factory Method]]
    - シングルトン/Singleton 

*** 構造に関するパターン

    - アダプタ/Adapter 
    - コンポジット/Composite 
    - デコレータ/Decorator 
    - プロクシ/Proxy 

*** 振る舞いに関するパターン

    - コマンド/Command 
    - インタープリタ/Interpreter 
    - イーテレータ/Iterator 
    - オブザーバ/Observer 
    - ストラテジ/Strategy 
    - テンプレートメソッド/Template Method 

** [[./singleton-pattern.org]]
** [[./builder-pattern.org]]
** [[./abstract-factory-pattern.org]]
** [[./observer-pattern.org]]

#+include: singleton-pattern.org minlevel 2
#+include: builder-pattern.org minlevel 2
#+include: abstract-factory-pattern.org :minlevel 2
#+include: observer-pattern.org :minlevel 2
