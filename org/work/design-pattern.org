* [[http://morizyun.github.io/blog/ruby-design-pattern-matome-mokuzi/][Ruby2.0.0で学ぶ、14個のデザインパターン]]

** GoFのデザインパターンとは、

「プログラミングのベストプラクティスを体系化したもの」です。

- しっかりと理解して設計すれば、ソフトウエア設計の効率を高めることがで
  きます。

- またデザインパターンが「プログラミングの思想」の共有をよりスムーズに
  してくれます。

- 先人たちの試行錯誤の結果です。
  
** デザインパターンの重要要素

GoFのデザインパターンには下のプリンシパルがあります：

   - 変わるものを変わらないものから分離する 

   - インターフェイスに対してプログラミングし、実装に対して行わない 

   - 継承より集約 

   - 委譲、委譲、委譲 

   - 必要になるまで作るな (You Ain’t Gonna Need It./YAGNI) 

** 各デザインパターンの説明

*** 生成に関するパターン

    - [[http://morizyun.github.io/blog/ruby-design-pattern-14-abstract-factory/][アブストラクトファクトリ/Abstract Factory]]

    - ビルダー/Builder 
    - [[http://morizyun.github.io/blog/ruby-design-pattern-11-factory-method/][ファクトリメソッド/Factory Method]]
    - シングルトン/Singleton 

*** 構造に関するパターン

    - アダプタ/Adapter 
    - コンポジット/Composite 
    - デコレータ/Decorator 
    - プロクシ/Proxy 

*** 振る舞いに関するパターン

    - コマンド/Command 
    - インタープリタ/Interpreter 
    - イーテレータ/Iterator 
    - オブザーバ/Observer 
    - ストラテジ/Strategy 
    - テンプレートメソッド/Template Method 

**  [[http://morizyun.github.io/blog/ruby-design-pattern-14-abstract-factory/][アブストラクトファクトリ/Abstract Factory]]

*** 抽象的な OrganismFactory, Animal, Plant

#+BEGIN_SRC ruby :tangle abstract_factory/organism_factory.rb :mkdirp y
class OrganismFactory
  def initialize(number_animals, number_plants)
    @animals = []
    number_animals.times do |i|
      animal = new_animal("動物#{i}")
      @animals << animal 
    end

    @plants = []
    number_plants.times do |i|
      plant = new_plant("植物#{i}")
      @plants << plant 
    end
  end

  def get_plants
    @plants
  end

  def get_animals
    @animals
  end
  
end
#+END_SRC

#+BEGIN_SRC ruby :tangle abstract_factory/animal.rb :mkdirp yes
class Animal

  def eat
    puts "Animalは食べるものですから。"
  end
  
end
#+END_SRC

#+BEGIN_SRC ruby :tangle abstract_factory/plant.rb :mkdirp yes
class Plant

  def grow
    puts "Plant は成長するものですから。"
  end
  
end
#+END_SRC

    
*** 具体的な OrganismFactory

#+BEGIN_SRC ruby :tangle abstract_factory/organism_factories/frog_and_algae.rb :mkdirp yes
require 'abstract_factory/organism_factory'
require 'abstract_factory/animals/frog.rb'
require 'abstract_factory/plants/algae.rb'

class FrogAndAlgaeFactory < OrganismFactory
  private

  def new_animal(name)
    Frog.new(name)
  end

  def new_plant(name)
    Algae.new(name)
  end
end
#+END_SRC

#+BEGIN_SRC ruby :tangle abstract_factory/organism_factories/duck_and_waterlily.rb :mkdirp yes
require 'abstract_factory/organism_factory'
require 'abstract_factory/animals/duck.rb'
require 'abstract_factory/plants/waterlily.rb'

class DuckAndWaterLilyFactory < OrganismFactory
  private

  def new_animal(name)
    Duck.new(name)
  end

  def new_plant(name)
    WaterLily.new(name)
  end
end

#+END_SRC


#+BEGIN_SRC ruby :tangle abstract_factory/do_frog_and_algae_factory.rb :results output
$: << "."

require 'abstract_factory/organism_factory'
require 'abstract_factory/organism_factories/frog_and_algae'
# require 'abstract_factory/animals/frog'
# require 'abstract_factory/plants/algae'


factory = FrogAndAlgaeFactory.new(4,1)
animals = factory.get_animals
animals.each do |animal| 
  animal.eat
end

plants = factory.get_plants
plants.each do |plant|
  plant.grow
end


#+END_SRC

#+RESULTS:
#+begin_example
frog 動物0 は食事中です.
Animalは食べるものですから。
frog 動物1 は食事中です.
Animalは食べるものですから。
frog 動物2 は食事中です.
Animalは食べるものですから。
frog 動物3 は食事中です.
Animalは食べるものですから。
藻 植物0 は成長中です.
Plant は成長するものですから。
#+end_example


#+BEGIN_SRC ruby :tangle abstract_factory/do_duck_and_waterlily_factory.rb :results output
$: << "."

require 'abstract_factory/organism_factory'
require 'abstract_factory/organism_factories/duck_and_waterlily'
# require 'abstract_factory/animals/duck'
# require 'abstract_factory/plants/waterlily'

factory = DuckAndWaterLilyFactory.new(4,1)
animals = factory.get_animals
animals.each do |animal| 
  animal.eat
end

plants = factory.get_plants
plants.each do |plant|
  plant.grow
end


#+END_SRC

#+RESULTS:
: duck 動物0 は食事中です.
: Animalは食べるものですから。
: duck 動物1 は食事中です.
: Animalは食べるものですから。
: duck 動物2 は食事中です.
: Animalは食べるものですから。
: duck 動物3 は食事中です.
: Animalは食べるものですから。
: 睡蓮 植物0 は成長中です.

*** 具体的な動物 animals/

#+BEGIN_SRC ruby :tangle abstract_factory/animals/duck.rb :mkdirp yes
require 'abstract_factory/animal'

class Duck < Animal
  def initialize(name)
    @name = name
  end

  def eat
    puts "duck #{@name} は食事中です."
    super
  end
end
#+END_SRC    

#+BEGIN_SRC ruby :tangle abstract_factory/animals/frog.rb :mkdirp yes
require 'abstract_factory/animal'

class Frog < Animal
  def initialize(name)
    @name = name
  end

  def eat
    puts "frog #{@name} は食事中です."
    super
  end
end
#+END_SRC    

*** 具体的な植物達

#+BEGIN_SRC ruby :tangle abstract_factory/plants/algae.rb :mkdirp yes
require 'abstract_factory/plant'
class Algae < Plant
  def initialize(name)
    @name = name
  end

  def grow
    puts("藻 #{@name} は成長中です.")
    super
  end
  
end
#+END_SRC

#+BEGIN_SRC ruby :tangle abstract_factory/plants/waterlily.rb :mkdirp yes
require 'abstract_factory/plant'

class WaterLily < Plant
  def initialize(name)
    @name = name
  end

  def grow
    puts("睡蓮 #{@name} は成長中です.")
  end
  
end
#+END_SRC

