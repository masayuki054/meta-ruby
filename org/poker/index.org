#+setupfile: ~/COMM/public_html/org-html-theme/index-bigblow-header.setup
#+include: ~/COMM/Lects/meta-ruby/site/info/common-header.org
#+title: poker

~suzuki/lects/meta-ruby/lects/poker
~suzuki/lects/meta-ruby/lects/note
* pokerのテスト駆動開発 

** 目的

   ソフトウェア構成論で作ったポーカーを，
   rubyで作り直し，ruby での開発を体験してみましょう。

   テスト駆動開発っぽくやってみましょう。

   emacs org-mode でやりましょう。

** ポーカーゲーム開発ストーリー

   モジュール分けやモジュールの機能については，[[http://wiki.cis.iwate-u.ac.jp/~wiki/prog.cgi?%E8%AC%9B%E7%BE%A9%E5%86%85%E5%AE%B9][Prog Wikky - 講義内容]]
   を参考にしてください。

** テスト駆動開発については

   [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/what-is-tdd/][ソフトウェア構成論 テスト駆動開発とは]] を参考にしてください

** test-unit 

 - [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/meta-ruby/lects/note/ruby-note.html][rubyノート]] (([[file+emacs:~suzuki/lects/meta-ruby/lects/note/ruby-note.org][@cis.org]] [[file+emacs:~/COMM/Lects/meta-ruby/site/lects/note/ruby-note.org][@s.org]]))
   

* 開発概要

** クラスの構造

#+BEGIN_SRC ruby
module Poker

  module Constant

  end
  class Card
    
  end
  class Deck
    
  end
  class Hand
    
  end
  class Player
    
  end
  class Play
    
  end
end
#+END_SRC

   - 12/21 Poker::Constant カードに関する定数をまとめるモジュール

   
** ディレクトリ構造
#+BEGIN_SRC sh :results output verbatim
~/COMM/bin/lstree ../poker

#+END_SRC

#+RESULTS:
#+begin_example
../poker
+-Rakefile.org
+-card.org
+-constant.org
+-constant.org~
+-deck.org
+-hand.org
+-index.html
+-index.org
+-org-test.org
+-player.rb
+-player.rb.org
+-poker.html
+-poker.org
+-poker.rb.org
+-test-constant.rb
+-babel-+-Rakefile
|       +-src-+-card.rb
|       |     +-constant.rb
|       |     +-deck.rb
|       |     +-hand.rb
|       +-test-+-#test-hand.rb#
|              +-test-card.rb
|              +-test-constant.rb
|              +-test-deck.rb
|              +-test-hand.rb
+-old_src-+-*shell*
|         +-Rakefile
|         +-Rakefile.org
|         +-card.rb
|         +-card.rb.org
|         +-constant.rb
|         +-constant.rb.org
|         +-deck.rb
|         +-deck.rb.org
|         +-hand.rb
|         +-hand.rb.org
|         +-play.rb
|         +-player.rb
|         +-player.rb.org
|         +-poker.rb
|         +-poker.rb.org
|         +-test-card.rb
|         +-test-card.rb.org
|         +-test-constant.rb
|         +-test-constant.rb.org
|         +-test-constant.rb.org~
|         +-test-deck.rb
|         +-test-deck.rb.org
|         +-test-hand.rb
|         +-test-poker.rb
#+end_example


* 文芸的プログラムによる開発

  例えばcardモジュールは，poker/card.org に作成し，org-babel
  の :tangle でtest/の下にテストを，src/の下にクラスを，作りましょう。

  ~suzuki/lects/meta-ruby/lects/poker の下にこのドキュメントがあります。
  参考にしてください。

* Constant
#+include: constant.org :minlevel 2
* Card
#+include: card.org :minlevel 2

* Deck 
#+include: deck.org :minlevel 2
* Hand
#+include: hand.org :minlevel 2
* Player
#+include: player.org
#+include: poker.org
* Rakefile
#+include: Rakefile.org :minlevel 2

* emacs/org-mode/ruby のこと
** org-mode 

*** ソースコードをファイルへ書き出す

    org-mode での書き方

#+BEGIN_EXAMPLE
,#+BEGIN_SRC ruby :tangle example/test_card.rb :mkdirp yes
# example/test_card.rb
require 'rubygems'
require 'test/unit'
'end'
,#+END_SRC
#+END_EXAMPLE

    Emacs コマンド
    : C-C C-v C-t

#+BEGIN_SRC ruby :tangle example/test_card.rb :mkdirp yes
# example/test_card.rb
require 'rubygems'
require 'test/unit'
end'
#+END_SRC


*** ob-shell 

**** ob-sh.el ソースコード
     
     [[https://github.com/tkf/org-mode/blob/master/lisp/ob-sh.el][org-mode/ob-sh.el at master · tkf/org-mode]]

***** sh の shell 指定

#+BEGIN_SRC elisp
(defvar org-babel-sh-command "sh"
  "Command used to invoke a shell.
This will be passed to  `shell-command-on-region'")

#+END_SRC

***** sh-ブロックの ruby が ~/.rbenv/shims/ruby ではない時

      ~/.rbevn/shims/ruby が動かないときは，
      sh-ブロックに :session を指定して，
      動かして，シェルバッファに移動して，

