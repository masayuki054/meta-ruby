* class/module
  - [[http://docs.ruby-lang.org/ja/2.0.0/class/Module.html#I_ANCESTORS][class Module (Ruby 2.0.0)]]
  - [[http://docs.ruby-lang.org/ja/2.0.0/class/Class.html][class Class (Ruby 2.0.0)]]

#+BEGIN_SRC sh :results output
refe ancestors
#+END_SRC

#+BEGIN_SRC sh :results output
refe superclass
#+END_SRC


#+BEGIN_SRC sh :results output
refe Module#nesting
refe Module#constants
refe Module#new

#+END_SRC

#+RESULTS:
#+begin_example
Module.nesting
--- nesting -> [Class, Module]

このメソッドを呼び出した時点でのクラス/モジュールのネスト情
報を配列に入れて返します。

  module Foo
    module Bar
      module Baz
        p Module.nesting   # => [Foo::Bar::Baz, Foo::Bar, Foo]
      end
    end
  end

Module#constants
--- constants(inherit = true) -> [Symbol]

そのモジュール(またはクラス)で定義されている定数名の配列を返します。

inherit に真を指定すると
スーパークラスやインクルードしているモジュールの定数も含みます。
[[c:Object]] のサブクラスの場合、Objectやそのスーパークラスで定義されている
定数は含まれません。 Object.constants とすると Object クラスで定義された
定数の配列が得られます。

@param inherit true を指定するとスーパークラスや include したモジュールで
       定義された定数が対象にはなります。false を指定した場合 対象にはなりません。

@see [[m:Module.constants]], [[m:Kernel.#local_variables]], [[m:Kernel.#global_variables]], [[m:Object#instance_variables]], [[m:Module#class_variables]]

 Module.constants と Module#constants の違い

  # 出力の簡略化のため起動時の定数一覧を取得して後で差し引く
  $clist = Module.constants

  class Foo
    FOO = 1
  end
  class Bar
    BAR = 1

    # Bar は BAR を含む
    p constants                         # => [:BAR]
    # 出力に FOO は含まれない
    p Module.constants - $clist         # => [:BAR, :Bar, :Foo]
    class Baz
      # Baz は定数を含まない
      p constants                       # => []

      # ネストしたクラスでは、外側のクラスで定義した定数は
      # 参照可能なので、BAR は、Module.constants には含まれる
      # (クラス Baz も Bar の定数なので同様)
      p Module.constants - $clist       # => [:BAR, :Baz, :Foo, :Bar]
    end
  end

Module.new
--- new -> Module
--- new {|mod| ... } -> Module

名前の付いていないモジュールを新しく生成して返します。

ブロックが与えられると生成したモジュールをブロックに渡し、
モジュールのコンテキストでブロックを実行します。

  mod = Module.new
  mod.module_eval {|m| ... }
  mod

と同じです。
ブロックの実行は Module#initialize が行います。

ブロックを与えた場合も生成したモジュールを返します。

このメソッドで生成されたモジュールは、
最初に名前が必要になったときに名前が決定します。
モジュールの名前は、
そのモジュールが代入されている定数名のいずれかです。

  m = Module.new
  p m               # => #<Module 0lx40198a54>
  p m.name          # => nil   # まだ名前は未定
  Foo = m
  # m.name          # ここで m.name を呼べば m の名前は "Foo" に確定する
  Bar = m
  m.name            # "Foo" か "Bar" のどちらかに決まる

#+end_example







@see [[m:Module#included_modules]]
