* ブロック

  この章で理解すべきこと
  - スコープ
  - クロージャ
  - クロージャによるスコープの操作
  - 呼び出し可能オブジェクトへの変換

** ブロックの基本

*** ブロックの作成
- do ... end が block 
- メソッド呼び出しの時のみ

*** ブロックが与えられているか？
- block_given? で調べられる
   
*** ブロックの呼び出し
- 呼ばれたメソッド側で yield により呼び出せる
- しかし，block は，block が作られた*環境*で実行される

** クロージャ

*** コードの実行

- ブロックはコード

- *self* が実行の主体 (場)

  - self は *環境* を持つ

    環境は，スコープ上の変数とその値のペア(*束縛*)の集まり
    
    - 局所変数 (一方向) のスコープ
      - block の入れ子構造 (nesting) のスコープ

    - インスタンス変数 (一通り) のスコープ

    - クラス変数 (一通り) のスコープ
      - class の継承方向のスコープ

    - 定数 (2方向)のスコープ
      - module の入れ子構造 (nesting) のスコープ
      - class の継承方向のスコープ

    
- クロージャ = block + self (環境)


- ブロックが生まれるとき，自身が生まれた環境を閉じ込めた ((*クロージャ*))
  となる

- クロージャが実行される時は，その環境で実行される
  - 定数はselfのクラスから辿れる
  - インスタンス変数、特異メソッドには self から辿れる

*** スコープのまとめ

- Rubyのスコープには束縛がある
- スコープは class, module, def のスコープゲートで区切られ。
- スコープゲートは，Class.new(), Module.new(), Moduel#define_method()
  で置き換え，それらに束縛を閉じこめたクロージャを与える。
- クロージャにより，束縛の共有も可能となる

(*s*) この辺りは，SICP の lambda による実現の方が，シンプルでわかりや
すい。

** instance_eval()

- obj.instance_eval block ::
  - オブジェクトobjのコンテキストで, 
  - ブロックblockを評価する

- obj を self にして, クロージャを実行するということ

*** カプセル化の破壊

instance_eval を使うとカプセル化が破壊できる

** 呼び出し可能オブジェクト

ブロックの使用
- コードの保管
- yieldを使ったブロックの呼び出し
  
コードを保管できる状況
- (({Proc})) の中．ブロックがオブジェクトになる
- (({lambda})) の中．
- メソッドの中

**** Proc 対 lambda

ブロックを Proc にする方法
- Proc.new()
- lambda { }　
- &修飾

***** Proc, lambda, return

Proc のリターンは，Proc の定義された環境から return 
(直前の環境へ戻る)

***** Proc, lambda, arity

引数の確認方法の違い

- lambda は厳格 (メソッドに準拠)
- Proc は柔軟

***** Proc対lambda: 判定

lambda がメソッドに似ている [/]
1. [ ] 項数に厳しく
2. [ ] return で自身を終える

Proc はコンテキスト中のコードの一部，
lambda は独立したコード

**** メソッド再び

- Object#method() でメソッドを，Method オブジェクトとして取得可
- Method オブジェクトは，Method#call() で呼び出し可能
- Method オブジェクトは，属するオブジェクトのスコープで実行される
- Method#unbind() は属するオブジェクトを引き離し，UnboundMethod
  オブジェクトが返る
- UnboundMethodはMethod#bind()でメソッドに戻せる
  クラスが異なると，例外が発生

**** 呼び出し可能オブジェクトのまとめ

呼び出し可能オブジェクト [/]
1. [ ] ブロック
   - オブジェクトではないが，呼び出し可能
   - 定義されたスコープで評価される

2. [ ] Proc
   - 定義されたスコープで評価される
   - 定義されたコンテキストの制御にしたがう

3. [ ] lambda
   - Proc クラスのオブジェクト，クロージャ
   - 定義されたスコープで評価される
   - 独立した method のように振る舞う

4. [ ] メソッド
   - オブジェクトにつながれ，
   - オブジェクトのスコープで評価される



