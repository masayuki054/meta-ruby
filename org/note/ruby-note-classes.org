* Rubyリファレンス
原典
- http://ref.xaio.jp/ruby/
- http://ref.xaio.jp/ruby/classes

method名やkeywordからクラスを探せるようにこの org文書を作成しました。

* BasicObject

  http://ref.xaio.jp/ruby/classes/basic_object

*=BasicObject=*クラスは、Ruby 1.9で新しく用意されたクラスで、=Object=
クラスの親クラスです。通常は、=BasicObject=オブジェクトを直接使うこと
はありません。

=BasicObject=は=Object=や=Kernel=のメソッドを持たないので、「メソッド
がほぼゼロの白紙のクラスを作りたい」というときは、=BasicObject=を継承
したサブクラスで実現できます。

** メソッド一覧

*** クラスメソッド

-  =new= : インスタンスの作成。

*** インスタンスメソッド

-  =!= : 否定。
-  =!== : 別のものか調べる。
-  ==== : オブジェクトの内容が同じか調べる。
-  =__send__= : メソッドを呼び出す。
-  =equal?= : 同じオブジェクトか調べる。
-  =instance_eval= : インスタンスの元でコードを実行。
-  =instance_exec= : インスタンスの元でコードを実行。

*** 特別な役割のメソッド

-  =initialize= : オブジェクトを作成（=new=）するとき呼ばれる。
-  =initialize_copy= :
   オブジェクトをコピー（=clone=、=dup=）するとき呼ばれる。
-  =method_missing= : メソッドが見つからないとき呼ばれる。
-  =singleton_method_added= : 特異メソッドを定義するとき呼ばれる。
-  =singleton_method_removed= : 特異メソッドを削除するとき呼ばれる。
-  =singleton_method_undefined= :
   特異メソッドを未定義にするとき呼ばれる。

[[/ruby/about][このサイトについて]] [[/ruby/legend][記事の読み方]]
[[/ruby/references][参考文献]]

Sponsored by [[http://www.oiax.jp/][Oiax Inc.]] / Powered by Ruby on
Rails and AmiWiki
 


* Object

- http://ref.xaio.jp/ruby/classes/object

*=Object=*クラスは、すべてのクラスの親クラスです。

** 親クラスとモジュール

=Object=クラスは=Kernel=モジュールをインクルードしています。

=BasicObject=クラスが=Object=クラスの親クラスになりました。

#+BEGIN_EXAMPLE
    Object < Kernel (< BasicObject)
#+END_EXAMPLE

** メソッド一覧

*** クラスメソッド

-  =new= : インスタンスの作成。

*** インスタンスメソッド

これらのメソッドは、実際には=Kernel=モジュールの=public=なメソッドとして実装されていますが、一般的に=Object=クラスのメソッドとして扱われます。また、この一覧には=BasicObject=のメソッドも混ぜてあります。

-  =!= : 否定。Ruby 1.9
-  =!== : 別のものか調べる。Ruby 1.9
-  =!~= : パターンマッチの否定。Ruby 1.9
-  ==== : オブジェクトの内容が同じか調べる。
-  ===== : =case=式でオブジェクトをテストする。
-  ==~= : パターンマッチ。
-  =__id__= : オブジェクトIDを返す。
-  =__send__= : メソッドを呼び出す。
-  =class= : オブジェクトのクラスを返す。
-  =clone= : オブジェクトのコピーを作成する。
-  =define_singleton_method= : 特異メソッドを定義する。Ruby 1.9
-  =display= : オブジェクトを文字列として出力する。
-  =dup= : オブジェクトのコピーを作成する。
-  =eql?= : ハッシュのキーとして同じか調べる。
-  =equal?= : 同じオブジェクトか調べる。
-  =enum_for= : =Enumerator=オブジェクトの作成。Ruby 1.8.7
-  =extend= : モジュールのメソッドを取り込む。
-  =freeze= : オブジェクトを凍結する。
-  =frozen?= : オブジェクトの凍結状態を調べる。
-  =hash= : ハッシュ値を返す。
-  =id= : オブジェクトIDを返す。+Ruby 1.9+
-  =inspect= : 読みやすい文字列に変換。
-  =instance_eval= : インスタンスの元でコードを実行。
-  =instance_exec= : インスタンスの元でコードを実行。Ruby 1.8.7
-  =instance_of?= : クラスに属しているか調べる。
-  =instance_variable_defined?= : インスタンス変数があるか調べる。
-  =instance_variable_get= : インスタンス変数の値を得る。
-  =instance_variable_set= : インスタンス変数の値を変える。
-  =instance_variables= : インスタンス変数の名前を配列で返す。
-  =is_a?= : クラスに属しているか調べる。
-  =kind_of?= : クラスに属しているか調べる。
-  =method= : メソッドから=Method=オブジェクトを作成。
-  =methods= : メソッドの名前を配列で返す。
-  =nil?= : =nil=かどうか調べる。
-  =object_id= : オブジェクトIDを返す。
-  =private_methods= : =private=なメソッドの名前を配列で返す。
-  =protected_methods= : =protected=なメソッドの名前を配列で返す。
-  =public_method= :
   =public=なメソッドから=Method=オブジェクトを作成。Ruby 1.9
-  =public_methods= : =public=なメソッドの名前を配列で返す。
-  =public_send= : =public=なメソッドを呼び出す。Ruby 1.9
-  =respond_to?= : メソッドを呼び出せるか調べる。
-  =send= : メソッドを呼び出す。
-  =singleton_class= : 特異クラスを返す。Ruby 1.9.2
-  =singleton_methods= : 特異メソッドの名前を配列で返す。
-  =taint= : オブジェクトを汚染する。
-  =tainted?= : 汚染状態を調べる。
-  =tap= : ブロックに自身を渡し、自身を返す。Ruby 1.8.7
-  =to_a= : 配列に変換。+Ruby 1.9+
-  =to_enum= : =Enumerator=オブジェクトの作成。Ruby 1.8.7
-  =to_s= : 文字列に変換。
-  =trust= : 信頼される状態に戻す。Ruby 1.9
-  =type= : オブジェクトのクラスを返す。+Ruby 1.9+
-  =untaint= : オブジェクトの汚染を除く。
-  =untrust= : オブジェクトを信頼されない状態にする。Ruby 1.9
-  =untrusted?= : 信頼状態を調べる。Ruby 1.9

*** privateメソッド

-  =remove_instance_variable= : インスタンス変数の削除。

*** Rubyから呼び出されるメソッド

-  =initialize= : オブジェクトを作成（=new=）するとき呼ばれる。
-  =initialize_copy= :
   オブジェクトをコピー（=clone=、=dup=）するとき呼ばれる。
-  =method_missing= : メソッドが見つからないとき呼ばれる。
-  =respond_to_missing?= : =respond_to?=が=false=のとき呼ばれる。Ruby
   1.9.2
-  =singleton_method_added= : 特異メソッドを定義するとき呼ばれる。
-  =singleton_method_removed= : 特異メソッドを削除するとき呼ばれる。
-  =singleton_method_undefined= :
   特異メソッドを未定義にするとき呼ばれる。



* Module

=Module=クラスは、クラスとモジュールを表すクラスです。=Class=クラスは
=Module=のサブクラスで、クラスだけを表します。

クラス・モジュールを定義すると、クラス名・モジュール名は
=Class=/=Module=オブジェクトを指す変数（定数）になります。
=Class=/=Module=オブジェクトをレシーバにすれば、=Class=/=Module=クラス
の=public=メソッドを呼び出せます。

クラス・モジュール定義の中のように、=self=が=Class=/=Module=オブジェク
トである場所では、=Class=/=Module=クラスの=private=メソッドを呼び出せ
ます。=attr_accessor=や=include=は=Module=クラスの=private=メソッドで
す。

** 親クラスとモジュール

=Module=クラスの親クラスは=Object=クラスです。

#+BEGIN_EXAMPLE
    Module < Object < Kernel (< BasicObject)
#+END_EXAMPLE

** メソッド一覧

*** クラスメソッド

-  =constants= : 現在使える定数名の一覧を返す。
-  =nesting= : 現在のクラス・モジュールのネスト状態を調べる。
-  =new= : モジュール定義を使わずにモジュールを作成。

*** publicなインスタンスメソッド

-  =<, <=, >, >== : 2つのクラスやモジュールの関係を調べる。
-  =<=>= : 2つのクラスやモジュールの関係を調べる。
-  ==== : 同じものか調べる。
-  ===== : クラスに属しているか調べる。
-  =ancestors= : 祖先クラスとモジュールの一覧を返す。
-  =autoload= : 定数に対応するファイルを自動ロードする。
-  =autoload?= : 定数が自動ロードされるか調べる。
-  =class_eval= : クラスやモジュールの元でコードを実行。
-  =class_exec= : クラスやモジュールの元でコードを実行。Ruby 1.8.7
-  =class_variable_defined?= : クラス変数があるか調べる。
-  =class_variables= : クラス変数名の一覧を返す。
-  =const_defined?= : 定数があるか調べる。
-  =const_get= : 定数の値を得る。
-  =const_set= : 定数を設定する。
-  =constants= : 定数名の一覧を返す。
-  =freeze= : クラスやモジュールを凍結する。
-  =include?= : モジュールをインクルードしているか調べる。
-  =included_modules= : インクルードしているモジュールの一覧を返す。
-  =instance_method= : メソッドから=UnboundMethod=オブジェクトを作成。
-  =instance_methods= : メソッドの名前を配列で返す。
-  =method_defined?= : メソッドがあるか調べる。
-  =module_eval= : クラスやモジュールの元でコードを実行。
-  =module_exec= : クラスやモジュールの元でコードを実行。Ruby 1.8.7
-  =name= : クラスやモジュールの名前を返す。
-  =private_class_method= : クラスメソッドを=private=にする。
-  =private_instance_methods= : =private=メソッドの名前を配列で返す。
-  =private_method_defined?= : =private=メソッドがあるか調べる。
-  =protected_instance_methods= :
   =protected=メソッドの名前を配列で返す。
-  =protected_method_defined?= : =protected=メソッドがあるか調べる。
-  =public_class_method= : クラスメソッドを=public=にする。
-  =public_instance_method= :
   =public=メソッドから=UnboundMethod=オブジェクトを作成。Ruby 1.9
-  =public_instance_methods= : =public=メソッドの名前を配列で返す。
-  =public_method_defined?= : =public=メソッドがあるか調べる。
-  =to_s= : クラスやモジュールを表す文字列を返す。

以下のメソッドは、Ruby 1.8では=private=でしたが、Ruby
1.9では=public=になりました。

-  =class_variable_get= : クラス変数の値を得る。
-  =class_variable_set= : クラス変数を設定する。
-  =remove_class_variable= : クラス変数の削除。

*** privateなインスタンスメソッド

-  =alias_method= : メソッドに別名を付ける。
-  =attr= : インスタンス変数のアクセサを定義する。
-  =attr_accessor= : インスタンス変数のアクセサを定義する。
-  =attr_reader= : インスタンス変数の読み出し専用アクセサを定義する。
-  =attr_writer= : インスタンス変数の書き込み専用アクセサを定義する。
-  =define_method= : メソッドを定義する。
-  =include= : モジュールをインクルードする。
-  =module_function= : モジュールのメソッドをモジュール関数にする。
-  =private= : メソッドを=private=にする。
-  =protected= : メソッドを=protected=にする。
-  =public= : メソッドを=public=にする。
-  =remove_const= : 定数の削除。
-  =remove_method= : メソッドの削除。
-  =undef_method= : メソッドを未定義にする。

*** Rubyから呼び出されるメソッド

-  =append_features= : インクルードされる前に呼ばれる。
-  =const_missing= : 存在しない定数を参照したときに呼ばれる。
-  =included= : インクルードされたあとで呼ばれる。
-  =extended= : オブジェクトに取り込まれたあとで呼ばれる。
-  =extend_object= : オブジェクトに取り込まれる前に呼ばれる。
-  =method_added= : メソッドを定義したときに呼ばれる。
-  =method_removed= : メソッドを削除したときに呼ばれる。
-  =method_undefined= : メソッドを未定義にしたときに呼ばれる。


* Class

=Class=クラスは、クラスを表すクラスで、=Module=クラスのサブクラスです。

クラスに関する機能のほとんどは、=Module=クラスに実装されていますので、=Module=クラスのほうを先に調べるといいでしょう。=Class=クラスの機能は、「=Module=の機能＋インスタンスの作成とクラスの継承」です。

** 親クラスとモジュール

=Class=クラスの親クラスは=Module=クラスです。

#+BEGIN_EXAMPLE
    Class < Module < Object < Kernel (< BasicObject)
#+END_EXAMPLE

** メソッド一覧

*** クラスメソッド

-  =new= : クラス定義を使わずにクラスを作成。 

   Class.new で無名クラスを作る
*** インスタンスメソッド

-  =allocate= : インスタンスの作成。
-  =new= : インスタンスの作成と初期化。
-  =superclass= : 親クラスを返す。

*** Rubyから呼び出されるメソッド

-  =inherited= : クラスが継承されたときに呼ばれる。

次のメソッドは=Module=クラスで定義されていますが、=Class=クラスでは未定義にされています：\\
 =append_features=、=extend_object=

[[/ruby/about][このサイトについて]] [[/ruby/legend][記事の読み方]]
[[/ruby/references][参考文献]]

Sponsored by [[http://www.oiax.jp/][Oiax Inc.]] / Powered by Ruby on
Rails and AmiWiki
