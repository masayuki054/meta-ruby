#+startup: outline

[[http://www.rubylife.jp/ini/][ruby入門]] [[file:ruby-note.org][ruby note]] [[http://docs.ruby-lang.org/ja/2.0.0/doc/index.html][リファレンスマニュアル]] 

* Ruby
  
  [[http://docs.ruby-lang.org/ja/2.0.0/doc/index.html][Ruby リファレンスマニュアル (Ruby 2.0.0)]] より

** はじめに

   - Rubyは手軽なオブジェクト指向プログラミングのためのインタプリタ言語
   - Rubyはテキスト処理やシステム管理のための豊富な機能を持っています。 
   - Rubyは単純で、分かりやすく、簡単に拡張できます。

*** Rubyの特長

    - インタプリタ
	
      Rubyはインタプリタ言語です。プログラムを実行するためにコンパイル
      する必要はありません。

    - 変数に型が無い (動的型付け)

      Rubyの変数はどのような型のデータも格納する事ができますので、 変
      数の型について心配する必要はありません。 半面、コンパイル時のチェッ
      クは弱くなります。

    - 変数宣言が不要
	
      Rubyでは変数を宣言無しで使う事ができます。 変数の種類(ローカル変
      数、グローバル変数、インスタンス変数など)は 変数名から知る事がで
      きます。

    - 単純な文法
	
      Rubyの文法はEiffelからわずかに影響を受けた単純なものです。

    - ユーザによるメモリ管理が不要
	
      Rubyはメモリ管理を自動的に行います。 どこからもアクセスされなく
      なったオブジェクトは インタプリタに組み込みのガーベージコレクタ
      によって回収されます。

    - 全てがオブジェクト
    
      Rubyははじめから純粋なオブジェクト指向言語として設計されています。
      整数のような基本的なデータ型をはじめとして、 全てのデータをオブ
      ジェクトとして統一的に取り扱えます。

    - クラス、継承、メソッド
    
      Rubyは クラス、継承、メソッドのようなオブジェクト指向言語として
      基本的な機能は 当然持っています。

    - 特異メソッド
    
      ある特定のオブジェクトにメソッドを付加することができます。 たと
      えば、GUIのあるボタンを押された時の動作を メソッドとして記述する
      ような使い方ができますし、 これを応用してプロトタイプベースの オ
      ブジェクト指向プログラミングも可能です(やりたければね)。

    - モジュールによるMix-in
    
      Rubyは多重継承は複雑さの源であるという見地から、 意図的に多重継
      承を持っていませんが、 モジュールを使ってクラス階層を横断して実
      装を共有できます。 この機能を"Mix-in"と呼びます。

    - ブロック付きメソッド呼び出し(イテレータ)
    
        制御構造の抽象化を援助するブロック付きメソッド呼び出しという機能があります。

    - クロージャ
    
      手続きをオブジェクトとして扱う機能があります。 このオブジェクト
      化された手続きのことをクロージャと呼びます。

    - 強力な文字列操作/正規表現
    
      Perlをお手本とした強力な文字列操作や正規表現検索の機能があります。

    - 多倍長整数
    
      組み込みの多倍長整数機能がありますので、 メモリが許す限り、非常
      に大きな整数の演算もできます。 たとえば、400の階乗なども簡単に計
      算できます。

    - 例外処理機能
    
      例外処理機能は例外的な状況への対処が簡単に書けます。

    - OSへの直接アクセス
    
      Rubyは(UNIXの)ほとんどのシステムコールの呼び出し機能を持っていま
      す。 Rubyだけでシステムプログラミングも可能です。

    - ダイナミックローディング

      OSが許せば、オブジェクトファイルを実行時に読み込む機能が提供され
      ます。
	

