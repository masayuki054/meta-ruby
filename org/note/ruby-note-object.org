* Rubyの原理

- 原典: [[http://docs.ruby-lang.org/ja/2.0.0/doc/spec=2fobject.html][オブジェクト]]  (ruby-lang.org)
- 原典:  [[http://docs.ruby-lang.org/ja/2.0.0/doc/spec=2fclass.html][クラス (Ruby 2.0.0)]]

** Todo オブジェクト
   SCHEDULED: <2016-01-24 日>

   ここに，ruby の基本原理， が書かれていると，((s-:)) は思う。

*** オブジェクトとは

- Ruby で扱える全ての値はオブジェクトです。 
- Rubyのオブジェクトに対して可能な操作はメソッド呼び出しのみです。
- あるオブジェクトが反応できるメソッドは、
  そのオブジェクトが所属するクラスによって一意に決定します。
- 所属するクラスはオブジェクト生成時に決まり、その後は特異クラスの導入
  以外、所属クラスが変わることはありません。
- またオブジェクトは、特定のクラスに対比して、その「インスタンス」とも呼ばれます。
- オブジェクトの生成は、一般には、別のオブジェクトのメソッドを呼び出すことによって行われます。

*** クラス

- クラスは自身に所属するオブジェクトが反応できるメソッドを決定します。
- 所属するオブジェクトに対してあるメソッドを呼び出すことができるなら、
  そのメソッドが「クラスに定義されている」と言います。
- またメソッドはクラスとメソッド名によって一意に決定します。

- クラスは必ずただひとつの「スーパークラス」を持ち、
- スーパークラスであるメソッドが定義されていれば自クラスでもそのメソッ
  ドが同じ内容で定義されていることになります。
  これを「継承」と呼びます。

- 継承は推移するので、スーパークラスのスーパークラスが持つメソッドもま
  た自クラスにおいて定義されていることになります。

**** モジュール

- ちょっと特殊でクラスではない。しかし機能は同じ。

*** メソッド

- メソッドは実行することができます。その実行を開始することを通常「呼び
  出す」と言います。
- また呼び出すときにはオブジェクトを渡すことができ、そのオブジェクトを
  「引数」と呼びます。
- いくつの引数を受け取ることができるかはメソッドの定義時に決定し、変更
  することはできません。



** Todo クラス

*** クラスとオブジェクト

- Ruby プログラムからはクラスもまたオブジェクトとして扱うことができる。

- 以下の基本操作が可能:
  -  メソッドの存在を問い合わせる
  -  メソッドを定義する
  -  メソッドの定義を取り消す

*** モジュール

- Ruby プログラムからはクラスもまたオブジェクトとして扱うことができる。

- 以下の基本操作が可能:
  -  メソッドの存在を問い合わせる
  -  メソッドを定義する
  -  メソッドの定義を取り消す

クラスと同じだが，インスタンスを作ること，はできない。


*** 特異クラス

あるオブジェクトだけに定義されたクラス (by ((s-:)))

