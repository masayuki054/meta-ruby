* クラスとは

** クラスとオブジェクト

   - *クラス*は *オブジェクト* の設計図です。

   - オブジェクトはクラスから生まれる
     - 具体化 (instantiate)
     - オブジェクトはクラスの *インスタンス* (instance)

   - オブジェクトの処理を記述するのが*メソッド*
     - クラス定義の中に記述する.

   - オブジェクト *毎* の状態を保持するのが *インスタンス変数*

   - (instance) メソッドの実行
   - 自分の状態 (instance)


** class Car ... end

   class は Carクラスから生まれるオブジェクトの振舞を記述する。

#+BEGIN_SRC ruby :session ruby :results output
class Car
  def initialize(carname)
    @name = carname
  end

  def dispName
    print(@name)
  end
end

car = Car.new("crown")
car.dispName
'end'
#+END_SRC

#+RESULTS:
: :dispName
: #<Car:0x007fb02b7b9368 @name="crown">
: crownnil


   - 「車」の設計図であるクラスを定義し、

     ： class Car ... end

   - クラスからオブジェクトを作成した後で、

     : car = Car.new

   - オブジェクトに対して名前を画面に出力させる

     : car.dispName

** インスタンスメソッド

   クラス内に記述されたメソッドはクラスから作成されたオブジェクトしか
   呼び出すことが出来ません。このようなメソッドを *インスタンスメソッ
   ド* と呼びます。

#+BEGIN_SRC ruby
class クラス名

  def メソッド名(引数1, 引数2, ...)
    処理
  end

end
'end'
#+END_SRC

例えばクラス名について表示するだけの簡単なインスタンスメソッドは次のようになり
ます。 

#+BEGIN_SRC ruby :session ruby
class Car
  def dispString(str)
    print(str, "¥n")
  end
end
'end'
#+END_SRC

なお、引数が無いメソッドの場合は括弧を省略しても構いません。 

#+BEGIN_SRC ruby :session ruby :results output

class Car
  def dispClassname
    print("Car class¥n")
  end

  def dispString(str, "¥n")
    print(str)
  end
end
'end'
#+END_SRC

インスタンスメソッドの呼び出し

定義されたインスタンスメソッドはクラスのオブジェクトから呼び出すことができます。


class Car
  def dispClassname
    print("Car class¥n")
  end
  
  def dispString(str, "¥n")
    print(str)
  end
end

car = Car.new
car.dispClassname
car.dispString("crown")

オブジェクトからメソッドを呼び出すにはオブジェクトの後にドット「.」を付けてメ
ソッドを名を記述します。引数がある場合は括弧の後に引数をカンマで列挙して記述し
て下さい。引数が無い場合はメソッド名だけで結構です。 


オブジェクト名.メソッド名(引数1, 引数2, ...)
オブジェクト名.メソッド名

またドット「.」の代わりにコロン(:)を2つ続けて次のように記述することも出来ます。


オブジェクト名::メソッド名(引数1, 引数2, ...)
オブジェクト名::メソッド名

どちらの形式も違いはありませんので、どちらかに統一して利用すればいいと思います。

オブジェクトを作成する為に使用した「new」メソッドはクラスに対して実行しました。
例えば「Car.new()」のようにです。このようなメソッドはクラスに対して実行するク
ラスメソッドと呼ばされます。今回のようにクラス内に定義したインスタンスメソッド
はクラスから作成したオブジェクトに対して実行する点が異なっていることに注意して
下さい。 

サンプルプログラム

では実際に試してみます。 

ClassTest3.rb 


class Car
  def dispClassname
    print("Car class¥n")
  end

  def dispString(str)
    print(str, "¥n")
  end
end

car = Car.new()
car.dispClassname
car.dispString("crown")

上記を実行すると次のように表示されます。 

インスタンスメソッド 

今回は2つのインスタンスメソッドを定義し、クラスから作成したオブジェクトに対し
てメソッドを実行してみました。 



#+BEGIN_SRC ruby :session ruby :results output


class Reji
  SHOUHIZEI = 0.05

  def initialize(init=0)
    @sum = init
  end
  
  def kounyuu(kingaku)
    @sum += kingaku
  end
  
  def goukei()
    return @sum * (1 + SHOUHIZEI)
  end
end
'end'
#+END_SRC

#+RESULTS:
: :goukei

#+BEGIN_SRC ruby :session ruby :results output

reji = Reji.new(0)
reji.kounyuu(100)
reji.kounyuu(80)
print(reji.goukei())

'end'

#+END_SRC

#+RESULTS:
: #<Reji:0x007fb02b664120 @sum=0>
: 100
: 180
: 189.0nil

#+BEGIN_SRC ruby :session ruby :results output
SHOUHIZEI
class \Reji
print SHOUHIZEI
end
Reji::SHOUHIZEI
'end'

#+END_SRC

#+RESULTS:
: NameError: uninitialized constant SHOUHIZEI
: 	from (irb):52
: 	from /home/staff/suzuki/.rbenv/versions/2.0.0-dev/bin/irb:11:in `<main>'
: 0.05nil
: 0.05


** 継承

#+BEGIN_SRC ruby :session ruby :results output

class Car
  def accele
    print("アクセルを踏みました")
  end

  def brake
    print("ブレーキを踏みました")
  end
end
'end'
#+END_SRC

#+RESULTS:
: :brake

#+BEGIN_SRC ruby :session ruby :results output
a = Car.new("abc")
a.brake
'end'
#+END_SRC

#+RESULTS:
: #<Car:0x007fb02b647ac0 @name="abc">
: ブレーキを踏みましたnil


#+BEGIN_SRC ruby :session ruby :results output
class Soarer < Car
  def initialize(name,type)
     @type = type
     super(name)
  end
  def openroof
    print("open roof\n");
  end
end

class Crown < Car
  def reclining
    print("reclining")
  end
end

'end'
#+END_SRC

#+RESULTS:
: :openroof
: :reclinin

#+BEGIN_SRC ruby :session ruby :results output

so = Soarer.new("soarer")
cr = Crown.new("crwon")

so.class
(so.class).superclass

so.dispName
'end'
#+END_SRC
\
#+RESULTS:
: #<Soarer:0x007fb02b61d888 @name="soarer">
: #<Crown:0x007fb02b616ec0 @name="crwon">
: Soarer
: Car
: soarernil


