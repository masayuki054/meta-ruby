* Joe Armstrongのオブジェクト指向はクソだ！

[[http://qiita.com/lambda-knight/items/fb7530232912dc4176c4][オブジェクト指向はクソか？ - Qiita]] を読んで

- 後から見つけた，[[https://gist.github.com/posaunehm/4087971][Why OO Sucks by Joe Armstrong]] の訳の方がぴんときます。

** オブジェクト指向が"Suck"である理由

#+BEGIN_QUOTE
私のOOPに対する反対意見はOOの基本的なアイデアに対するものも含まれます。
以下にそのアイデアのアウトラインと私の反対意見を述べます。

#+END_QUOTE

*** 反論その１

#+BEGIN_QUOTE

- データ構造と機能は一緒にすべきではない

（Objection 1 - Data structure and functions should not be bound
together）

オブジェクトは関数とデータ構造が分割出来ない単位としてひとつまとめにし
ています。しかし、私はこれこそが基本的でかつ大きな誤りであると考えてい
ます。なぜなら、関数とデータは異なる世界に存在するからです。なぜでしょ
う。関数は何かを実行します。そして関数はインプットとアウトプットを持ち
ます。関数の入力と出力はデータ構造であり、関数により変更されます。
#+END_QUOTE

- 「関数とデータは異なる世界に存在するからです」は，理由が希薄です。
  - 「関数とデータは，異なるものです。」は認めます。
  - データとその処理関数は近くにあって，同時に見られた方が，分かりやす
    いことが多いと思う。
  - データだけからなるクラスがあってもいいし，インタフェースだけからな
    るモジュールがあってもいい。Rubyではそうなっている。

#+BEGIN_QUOTE

多くの言語の関数は命令のシーケンスから作られます。すなわち、「まずはこ
れを実行して、次はこれを実行しなさい」という手順です。関数を理解するた
めにはどのような順序でものごとが実行されるかを理解しなければなりません
（遅延評価をサポートする関数型言語と論理型言語ではこの制限は緩やかで
す）。

#+END_QUOTE

  - 関数についての説明はそのとおり。

#+BEGIN_QUOTE
データ構造はそれそのものです。これらは何もしません。これらは本来宣言的
なものなのです。データ構造を理解することは関数を理解することよりもはる
かに簡単なことなのです。

#+END_QUOTE

  - これは違うと思う。データ構造だけを見て，データ構造を用いてできる
    ことを理解することは，ほんとうに難しいこと，だと思う。

#+BEGIN_QUOTE
関数は，入力から出力へと変換するための，ブラックボックスです。入力と出
力を理解すれば，関数を理解したことになります。でも理解したからと言って，
関数を記述できることにはなりません。

#+END_QUOTE

  - 些細なことですが，「入力と出力を理解すれば関数を理解したことになり
    ます」ではなくて，関数を利用できることになるだと思います。そして，
    「関数を利用できない人に，関数の中身は記述できません」だと思います。

#+BEGIN_QUOTE
関数は通常、コンピュータシステムにおいてジョブがデータ構造をT1からT2に
変換することの観察を通して理解したことになります。

#+END_QUOTE

  - ここは最初，理解できませんでした。
  - 「関数を書くには，複数のデータを見なくてはいけない。ある一つの型を主
    にみて，書くことはよくない」と言ってるのかな。
    - そうかもしれないが，。。。
    - 適切な抽象度で見れば，関数のやってることは下記の3種 (ほんとかな？):
      - 変換 :: 自身 -> 自身
      - 簡約 :: 自身 -> 自明なもの
      - 合成 :: 自身 -> 高いレベルのもの
      だとすると，変換や簡約は自身と一緒に記述してあると，わかりやすい。
      合成は，自身の中に記述するのではなく，高いレベルのものと一緒に書
      くべきだと，思えます。

      入力が複数ある場合は，「どれか主になるものがある」場合や，「一纏
      めとして扱うことができる」場合は，型(データ)を主に，処理の記述が
      でき，何をやっているのかが，分かりやすいと，思えます。

#+BEGIN_QUOTE
このように関数とデータ構造は全く異なるタイプの生き物です。そしてそれを
同じカゴの中に閉じ込めるのは全く持って間違っていることなのです。

#+END_QUOTE

  - 「異なるタイプの生き物を同じカゴに閉じ込めるのは間違い」は，理由になっていません。

  - 関数とデータ構造を近くに置いて，同時に見られることは，いいことです。

  - 問題があるとすれば，同じデータ構造に対し，異なる操作関数からなるク
    ラスが沢山ある場合の冗長さかな。

  - 「データを理解することは簡単」が考え方の違いの根本ですね，きっと。

    データ駆動なのか関数駆動(こんな言葉ある？)なのかの違いですね。

    関数駆動において，関数をできるだけ汎用にするためには，入力の型は，
    できるだけシンプルにし，入力の意味を多様に解釈・適応できることが，
    関数の汎用性を高めるこになる。

    オブジェクト指向では，その解釈や適応できることを，書いておきたいんだ
    よね。きっと。


*** 反論その２
#+BEGIN_QUOTE

- すべてはオブジェクトではない

(Objection 2 - Everything has to be an object.)

「時刻」について考えてみましょう。OO言語の立場での「時刻」はオブジェク
トであるべきです。でも、非OO言語では「時刻」はデータタイプのインスタン
スです。例えばErlangでは「時刻」の多くのバラエティがあります。これらは
とても明白で曖昧さがありません。

#+END_QUOTE

  - 時刻を表すデータ型はあったほうがいいでしょう。自明だと思います。時
    刻を表すのに整数の組み合わせをもちいたいならそうもできます。
    オブジェクトであるべきかどうかの議論にはなっていません。

#+BEGIN_EXAMPLE
    -deftype day() = 1..31.
    -deftype month() = 1..12.
    -deftype year() = int().
    -deftype hour() = 1..24.
    -deftype minute() = 1..60.
    -deftype second() = 1..60.
    -deftype abstime() = {abstime, year(), month(), day(), hour(), min(), sec()}.
    -deftype hms() = {hms, hour(), min(), sec()}.
    ...

これらの定義はどの特定のオブジェクトにも属していません。これらはどこで
も利用できるデータ構造で「時刻」を表現しており、システムのどの関数から
でも利用することができます。

そしてどのようなメソッドにも関連していません。
#+END_EXAMPLE

  - これらはインタフェース群とクラス (abstime(), hms()) )に見えるなぁ。


*** 反論その３-オブジェクト指向言語ではデータタイプ定義はあちこちに散らばってしまう

#+BEGIN_QUOTE
(Objection 3 - In an OOPL data type definitions are spread out all over
the place.)

オブジェクト指向ではデータタイプはオブジェクトとして定義されます。そう
するとデータタイプは一箇所で見つけることができません。ErlangやCではす
べての私のデータは一箇所であるinclude fileもしくはデータ辞書でみつける
ことができます。でも、OOPLではこのようなことができず、データタイプ定義
はあちこちに散らばってしまいます。

#+END_QUOTE

- Rubyでは，class/module 単位のまとまりをつくり, 継承やincludeにより
  階層を作り，require によって，必要なライブラリを記述し，
  適切な抽象度で，見ることができる。散らばっているのではなく，
  適切なまとまりごとに*リンク*づけられている。
  一望したければ，ツールをつくればいいだろう。

#+BEGIN_QUOTE

この例を示しましょう。私が汎用的なデータ構造を定義したいとします。この
汎用データタイプとはシステムのすべての場所で使えるものです。

LISPプログラマであれば「わずかな汎用データタイプと多くの小さな関数がこ
れらに作用すること」が「数多いデータタイプとこれらに作用する少ない数の
関数よりも良いこと」という真実を知っています。

そして､汎用データ構造としてリンクリストや配列、ハッシュテーブルがあり、
さらには時刻、日付、ファイル名などがあります。

OOPLでは私は汎用的なデータ構造を定義する際にはなにかベースオブジェクト
の中から選択しなければならないというとても面倒くさいことをしなければな
りません。そして､そのデータ構造はこのオブジェクトを継承して作る必要が
あります。もし何か「時刻」のオブジェクトを定義したい場合、これがどのベー
スオブジェクトに所属していて、それ自体、どのようなオブジェクトであるか
考えなければならないのです｡

#+END_QUOTE

*** 反論その４
#+BEGIN_QUOTE

- オブジェクトはプライベートな状態を持っている

（Objection 4 - Objects have private state.）

状態(state)は諸悪の根源です。特に関数の副作用は避けるべきです。しかし
ながらプログラミング言語において状態は好ましいものではないのに関わらず、
実世界では状態は至るところに存在します。

#+END_QUOTE

  - はい，実世界をモデル化するプログラムでは，状態を持つことは 避けら
    れませんね。
    
#+BEGIN_QUOTE
例えば私は銀行口座の状態､すなわちに預金残高に大いなる関心があります。
そしていつ私が入金や出金をする場合には銀行の口座が正しく更新されなけれ
ばとても困ったことになります。

実世界でこのような状態が存在したとして、この状態を取り扱うためにはプロ
グラミング言語はどのような仕組みを提供すればよいのでしょうか。

OOPLはプログラマから状態を隠しなさいといいます。状態は隠されてアクセス
関数を通してしか見えません。

伝統的なプログラミング言語であるCやPasalでは状態変数の可視性は言語のス
コープのルールによってコントロールされます。

でも､純粋に宣言的な言語では状態は存在しないことになっています。このよ
うな宣言的言語ではシステムのグローバルな状態はすべての関数の入力や出力
になりうるのです。関数型言語におけるモナドや論理型言語におけるDCGでは
「状態はあたかも関係のないように」プログラミングすることができます。に
も関わらず必要な場合にはこれらのシステムの状態に完全にアクセスをするこ
とができるのです。

ほんとうは「プログラマから状態を隠す」というOOPLで選択されたオプション
はとても悪いものなのです。状態を公開して状態の厄介さを最小限にしようと
する努力をすべきなのに､その代わりとしてOOPLではそれを隠し去ってしまっ
たのです。

#+END_QUOTE

- よく理解できていませんが，「プログラマから状態を隠すのは良くない，
  OOPLだけがそうしている」という主張と読みました。

- 「隠くすことも，公開することも，できるようにしよう」という立場だと思
  います。アクセスすべきものは，アクセスできるようにします。でも，アク
  セスする時は，その持ち主のメソッドを通してというのが，Rubyのやり方。

** オブジェクトが広まった理由
#+BEGIN_QUOTE

オブジェクト指向が広まった理由は次のとおりだといわれています。

- Reason 1 - It was thought to be easy to learn.
 （簡単に学べると思われていたから）
#+END_QUOTE

   - Ruby は簡単に学べると思う。

#+BEGIN_QUOTE

- Reason 2 - It was thought to make code reuse easier.
 （再利用がより簡単だと思われているから）

#+END_QUOTE

   - Rubyでは，再利用が簡単だと思う。

#+BEGIN_QUOTE

- Reason 3 - It was hyped.
 （売り込まれたから）

- Reason 4 - It created a new software industry.
 （新しいソフトウエア産業を作ったから）

#+END_QUOTE

   - そういう風潮もありますね。

 #+BEGIN_QUOTE
 
しかし、１と２が事実であるという証拠はまったくを持って見たことがありま
せん。

#+END_QUOTE

   - 筆者は Ruby を使ったことがあるのかなぁ？

#+BEGIN_QUOTE

それでも実際にオブジェクト指向が広まった理由はテクノロジーに対す
る逆向きの作用であると思われます。つまり、あるテクノロジーがひどすぎる
と、そのテクノロジー自体が作った問題を解決するための新たなビジネスが登
場して、金儲けをしたい人たちのアイデアになるのです。実はこのことが実際
のOOPに対する推進力になっているということなのです｡

#+END_QUOTE

   - そういう風潮もありますね。
